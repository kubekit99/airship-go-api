// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateNodeLabelsReader is a Reader for the UpdateNodeLabels structure.
type UpdateNodeLabelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNodeLabelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateNodeLabelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateNodeLabelsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateNodeLabelsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateNodeLabelsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateNodeLabelsOK creates a UpdateNodeLabelsOK with default headers values
func NewUpdateNodeLabelsOK() *UpdateNodeLabelsOK {
	return &UpdateNodeLabelsOK{}
}

/*UpdateNodeLabelsOK handles this case with default header values.

Generic String answer
*/
type UpdateNodeLabelsOK struct {
	Payload string
}

func (o *UpdateNodeLabelsOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1.0/node-labels/{node-name}][%d] updateNodeLabelsOK  %+v", 200, o.Payload)
}

func (o *UpdateNodeLabelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNodeLabelsUnauthorized creates a UpdateNodeLabelsUnauthorized with default headers values
func NewUpdateNodeLabelsUnauthorized() *UpdateNodeLabelsUnauthorized {
	return &UpdateNodeLabelsUnauthorized{}
}

/*UpdateNodeLabelsUnauthorized handles this case with default header values.

401 Not authorized
*/
type UpdateNodeLabelsUnauthorized struct {
}

func (o *UpdateNodeLabelsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1.0/node-labels/{node-name}][%d] updateNodeLabelsUnauthorized ", 401)
}

func (o *UpdateNodeLabelsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNodeLabelsForbidden creates a UpdateNodeLabelsForbidden with default headers values
func NewUpdateNodeLabelsForbidden() *UpdateNodeLabelsForbidden {
	return &UpdateNodeLabelsForbidden{}
}

/*UpdateNodeLabelsForbidden handles this case with default header values.

403 Forbidden
*/
type UpdateNodeLabelsForbidden struct {
}

func (o *UpdateNodeLabelsForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1.0/node-labels/{node-name}][%d] updateNodeLabelsForbidden ", 403)
}

func (o *UpdateNodeLabelsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNodeLabelsInternalServerError creates a UpdateNodeLabelsInternalServerError with default headers values
func NewUpdateNodeLabelsInternalServerError() *UpdateNodeLabelsInternalServerError {
	return &UpdateNodeLabelsInternalServerError{}
}

/*UpdateNodeLabelsInternalServerError handles this case with default header values.

500 Internal Server Error
*/
type UpdateNodeLabelsInternalServerError struct {
}

func (o *UpdateNodeLabelsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1.0/node-labels/{node-name}][%d] updateNodeLabelsInternalServerError ", 500)
}

func (o *UpdateNodeLabelsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
