// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateNodeLabelsHandlerFunc turns a function with the right signature into a update node labels handler
type UpdateNodeLabelsHandlerFunc func(UpdateNodeLabelsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateNodeLabelsHandlerFunc) Handle(params UpdateNodeLabelsParams) middleware.Responder {
	return fn(params)
}

// UpdateNodeLabelsHandler interface for that can handle valid update node labels params
type UpdateNodeLabelsHandler interface {
	Handle(UpdateNodeLabelsParams) middleware.Responder
}

// NewUpdateNodeLabels creates a new http.Handler for the update node labels operation
func NewUpdateNodeLabels(ctx *middleware.Context, handler UpdateNodeLabelsHandler) *UpdateNodeLabels {
	return &UpdateNodeLabels{Context: ctx, Handler: handler}
}

/*UpdateNodeLabels swagger:route PUT /api/v1.0/node-labels/{node-name} updateNodeLabels

Update Node Labels

*/
type UpdateNodeLabels struct {
	Context *middleware.Context
	Handler UpdateNodeLabelsHandler
}

func (o *UpdateNodeLabels) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateNodeLabelsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
