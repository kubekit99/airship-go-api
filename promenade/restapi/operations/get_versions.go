// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "github.com/kubekit99/airship-go-api/promenade/models"
)

// GetVersionsHandlerFunc turns a function with the right signature into a get versions handler
type GetVersionsHandlerFunc func(GetVersionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetVersionsHandlerFunc) Handle(params GetVersionsParams) middleware.Responder {
	return fn(params)
}

// GetVersionsHandler interface for that can handle valid get versions params
type GetVersionsHandler interface {
	Handle(GetVersionsParams) middleware.Responder
}

// NewGetVersions creates a new http.Handler for the get versions operation
func NewGetVersions(ctx *middleware.Context, handler GetVersionsHandler) *GetVersions {
	return &GetVersions{Context: ctx, Handler: handler}
}

/*GetVersions swagger:route GET /versions getVersions

Returns list of all supported versions of Promenade. Currently this returns a static value.

*/
type GetVersions struct {
	Context *middleware.Context
	Handler GetVersionsHandler
}

func (o *GetVersions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetVersionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetVersionsOKBody get versions o k body
// swagger:model GetVersionsOKBody
type GetVersionsOKBody struct {
	models.Versions
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetVersionsOKBody) UnmarshalJSON(raw []byte) error {
	// GetVersionsOKBodyAO0
	var getVersionsOKBodyAO0 models.Versions
	if err := swag.ReadJSON(raw, &getVersionsOKBodyAO0); err != nil {
		return err
	}
	o.Versions = getVersionsOKBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetVersionsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getVersionsOKBodyAO0, err := swag.WriteJSON(o.Versions)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getVersionsOKBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get versions o k body
func (o *GetVersionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Versions
	if err := o.Versions.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetVersionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetVersionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetVersionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
