// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostRollbackReleaseNameParams creates a new PostRollbackReleaseNameParams object
// with the default values initialized.
func NewPostRollbackReleaseNameParams() *PostRollbackReleaseNameParams {
	var (
		dryRunDefault       = bool(false)
		forceDefault        = bool(false)
		recreatePodsDefault = bool(false)
		tillerHostDefault   = string("None")
		timeoutDefault      = int64(3600)
		versionDefault      = int64(0)
	)
	return &PostRollbackReleaseNameParams{
		DryRun:       &dryRunDefault,
		Force:        &forceDefault,
		RecreatePods: &recreatePodsDefault,
		TillerHost:   &tillerHostDefault,
		Timeout:      &timeoutDefault,
		Version:      &versionDefault,

		requestTimeout: cr.DefaultTimeout,
	}
}

// NewPostRollbackReleaseNameParamsWithTimeout creates a new PostRollbackReleaseNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostRollbackReleaseNameParamsWithTimeout(timeout time.Duration) *PostRollbackReleaseNameParams {
	var (
		dryRunDefault       = bool(false)
		forceDefault        = bool(false)
		recreatePodsDefault = bool(false)
		tillerHostDefault   = string("None")
		timeoutDefault      = int64(3600)
		versionDefault      = int64(0)
	)
	return &PostRollbackReleaseNameParams{
		DryRun:       &dryRunDefault,
		Force:        &forceDefault,
		RecreatePods: &recreatePodsDefault,
		TillerHost:   &tillerHostDefault,
		Timeout:      &timeoutDefault,
		Version:      &versionDefault,

		requestTimeout: timeout,
	}
}

// NewPostRollbackReleaseNameParamsWithContext creates a new PostRollbackReleaseNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostRollbackReleaseNameParamsWithContext(ctx context.Context) *PostRollbackReleaseNameParams {
	var (
		dryRunDefault       = bool(false)
		forceDefault        = bool(false)
		recreatePodsDefault = bool(false)
		tillerHostDefault   = string("None")
		timeoutDefault      = int64(3600)
		versionDefault      = int64(0)
	)
	return &PostRollbackReleaseNameParams{
		DryRun:       &dryRunDefault,
		Force:        &forceDefault,
		RecreatePods: &recreatePodsDefault,
		TillerHost:   &tillerHostDefault,
		Timeout:      &timeoutDefault,
		Version:      &versionDefault,

		Context: ctx,
	}
}

// NewPostRollbackReleaseNameParamsWithHTTPClient creates a new PostRollbackReleaseNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostRollbackReleaseNameParamsWithHTTPClient(client *http.Client) *PostRollbackReleaseNameParams {
	var (
		dryRunDefault       = bool(false)
		forceDefault        = bool(false)
		recreatePodsDefault = bool(false)
		tillerHostDefault   = string("None")
		timeoutDefault      = int64(3600)
		versionDefault      = int64(0)
	)
	return &PostRollbackReleaseNameParams{
		DryRun:       &dryRunDefault,
		Force:        &forceDefault,
		RecreatePods: &recreatePodsDefault,
		TillerHost:   &tillerHostDefault,
		Timeout:      &timeoutDefault,
		Version:      &versionDefault,
		HTTPClient:   client,
	}
}

/*PostRollbackReleaseNameParams contains all the parameters to send to the API endpoint
for the post rollback release name operation typically these are written to a http.Request
*/
type PostRollbackReleaseNameParams struct {

	/*XAuthToken
	  A fernet keystone bearer token used for authentication and authorization

	*/
	XAuthToken *string
	/*DryRun
	  Flag to simulate an action if set to True

	*/
	DryRun *bool
	/*Force
	  Specifies whether to force resource update through delete/recreate if needed.

	*/
	Force *bool
	/*RecreatePods
	  Specifies whether to restart pods for the resource if applicable.

	*/
	RecreatePods *bool
	/*ReleaseName
	  Name of the release to be rolled back

	*/
	ReleaseName string
	/*TillerHost
	  Hostname of the Tiller server

	*/
	TillerHost *string
	/*TillerNamespace
	  Tiller namespace. Default is the value of `CONF.tiller_namespace`

	*/
	TillerNamespace *string
	/*TillerPort
	  Port number of the Tiller server. Default is the value of `CONF.tiller_port`.

	*/
	TillerPort *int64
	/*Timeout
	  Specifies time in seconds Tiller should wait for the action to complete before timing out.

	*/
	Timeout *int64
	/*Version
	  Version number of release to rollback to. 0 represents the previous version

	*/
	Version *int64
	/*Wait
	  Specifies whether Tiller should wait until the action is complete before returning.

	*/
	Wait *bool

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithRequestTimeout adds the timeout to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithRequestTimeout(timeout time.Duration) *PostRollbackReleaseNameParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithContext(ctx context.Context) *PostRollbackReleaseNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithHTTPClient(client *http.Client) *PostRollbackReleaseNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXAuthToken adds the xAuthToken to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithXAuthToken(xAuthToken *string) *PostRollbackReleaseNameParams {
	o.SetXAuthToken(xAuthToken)
	return o
}

// SetXAuthToken adds the xAuthToken to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetXAuthToken(xAuthToken *string) {
	o.XAuthToken = xAuthToken
}

// WithDryRun adds the dryRun to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithDryRun(dryRun *bool) *PostRollbackReleaseNameParams {
	o.SetDryRun(dryRun)
	return o
}

// SetDryRun adds the dryRun to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetDryRun(dryRun *bool) {
	o.DryRun = dryRun
}

// WithForce adds the force to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithForce(force *bool) *PostRollbackReleaseNameParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetForce(force *bool) {
	o.Force = force
}

// WithRecreatePods adds the recreatePods to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithRecreatePods(recreatePods *bool) *PostRollbackReleaseNameParams {
	o.SetRecreatePods(recreatePods)
	return o
}

// SetRecreatePods adds the recreatePods to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetRecreatePods(recreatePods *bool) {
	o.RecreatePods = recreatePods
}

// WithReleaseName adds the releaseName to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithReleaseName(releaseName string) *PostRollbackReleaseNameParams {
	o.SetReleaseName(releaseName)
	return o
}

// SetReleaseName adds the releaseName to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetReleaseName(releaseName string) {
	o.ReleaseName = releaseName
}

// WithTillerHost adds the tillerHost to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithTillerHost(tillerHost *string) *PostRollbackReleaseNameParams {
	o.SetTillerHost(tillerHost)
	return o
}

// SetTillerHost adds the tillerHost to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetTillerHost(tillerHost *string) {
	o.TillerHost = tillerHost
}

// WithTillerNamespace adds the tillerNamespace to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithTillerNamespace(tillerNamespace *string) *PostRollbackReleaseNameParams {
	o.SetTillerNamespace(tillerNamespace)
	return o
}

// SetTillerNamespace adds the tillerNamespace to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetTillerNamespace(tillerNamespace *string) {
	o.TillerNamespace = tillerNamespace
}

// WithTillerPort adds the tillerPort to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithTillerPort(tillerPort *int64) *PostRollbackReleaseNameParams {
	o.SetTillerPort(tillerPort)
	return o
}

// SetTillerPort adds the tillerPort to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetTillerPort(tillerPort *int64) {
	o.TillerPort = tillerPort
}

// WithTimeout adds the timeout to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithTimeout(timeout *int64) *PostRollbackReleaseNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetTimeout(timeout *int64) {
	o.Timeout = timeout
}

// WithVersion adds the version to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithVersion(version *int64) *PostRollbackReleaseNameParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetVersion(version *int64) {
	o.Version = version
}

// WithWait adds the wait to the post rollback release name params
func (o *PostRollbackReleaseNameParams) WithWait(wait *bool) *PostRollbackReleaseNameParams {
	o.SetWait(wait)
	return o
}

// SetWait adds the wait to the post rollback release name params
func (o *PostRollbackReleaseNameParams) SetWait(wait *bool) {
	o.Wait = wait
}

// WriteToRequest writes these params to a swagger request
func (o *PostRollbackReleaseNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	if o.XAuthToken != nil {

		// header param X-Auth-Token
		if err := r.SetHeaderParam("X-Auth-Token", *o.XAuthToken); err != nil {
			return err
		}

	}

	if o.DryRun != nil {

		// query param dry_run
		var qrDryRun bool
		if o.DryRun != nil {
			qrDryRun = *o.DryRun
		}
		qDryRun := swag.FormatBool(qrDryRun)
		if qDryRun != "" {
			if err := r.SetQueryParam("dry_run", qDryRun); err != nil {
				return err
			}
		}

	}

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	if o.RecreatePods != nil {

		// query param recreate_pods
		var qrRecreatePods bool
		if o.RecreatePods != nil {
			qrRecreatePods = *o.RecreatePods
		}
		qRecreatePods := swag.FormatBool(qrRecreatePods)
		if qRecreatePods != "" {
			if err := r.SetQueryParam("recreate_pods", qRecreatePods); err != nil {
				return err
			}
		}

	}

	// path param release_name
	if err := r.SetPathParam("release_name", o.ReleaseName); err != nil {
		return err
	}

	if o.TillerHost != nil {

		// query param tiller_host
		var qrTillerHost string
		if o.TillerHost != nil {
			qrTillerHost = *o.TillerHost
		}
		qTillerHost := qrTillerHost
		if qTillerHost != "" {
			if err := r.SetQueryParam("tiller_host", qTillerHost); err != nil {
				return err
			}
		}

	}

	if o.TillerNamespace != nil {

		// query param tiller_namespace
		var qrTillerNamespace string
		if o.TillerNamespace != nil {
			qrTillerNamespace = *o.TillerNamespace
		}
		qTillerNamespace := qrTillerNamespace
		if qTillerNamespace != "" {
			if err := r.SetQueryParam("tiller_namespace", qTillerNamespace); err != nil {
				return err
			}
		}

	}

	if o.TillerPort != nil {

		// query param tiller_port
		var qrTillerPort int64
		if o.TillerPort != nil {
			qrTillerPort = *o.TillerPort
		}
		qTillerPort := swag.FormatInt64(qrTillerPort)
		if qTillerPort != "" {
			if err := r.SetQueryParam("tiller_port", qTillerPort); err != nil {
				return err
			}
		}

	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout int64
		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := swag.FormatInt64(qrTimeout)
		if qTimeout != "" {
			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}

	}

	if o.Version != nil {

		// query param version
		var qrVersion int64
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt64(qrVersion)
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if o.Wait != nil {

		// query param wait
		var qrWait bool
		if o.Wait != nil {
			qrWait = *o.Wait
		}
		qWait := swag.FormatBool(qrWait)
		if qWait != "" {
			if err := r.SetQueryParam("wait", qWait); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
