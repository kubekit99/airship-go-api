// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostApplyManifestParams creates a new PostApplyManifestParams object
// with the default values initialized.
func NewPostApplyManifestParams() *PostApplyManifestParams {
	var (
		disableUpdatePostDefault  = bool(false)
		disableUpdatePreDefault   = bool(false)
		dryRunDefault             = bool(false)
		enableChartCleanupDefault = bool(false)
		tillerHostDefault         = string("None")
		timeoutDefault            = int64(3600)
	)
	return &PostApplyManifestParams{
		DisableUpdatePost:  &disableUpdatePostDefault,
		DisableUpdatePre:   &disableUpdatePreDefault,
		DryRun:             &dryRunDefault,
		EnableChartCleanup: &enableChartCleanupDefault,
		TillerHost:         &tillerHostDefault,
		Timeout:            &timeoutDefault,

		requestTimeout: cr.DefaultTimeout,
	}
}

// NewPostApplyManifestParamsWithTimeout creates a new PostApplyManifestParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostApplyManifestParamsWithTimeout(timeout time.Duration) *PostApplyManifestParams {
	var (
		disableUpdatePostDefault  = bool(false)
		disableUpdatePreDefault   = bool(false)
		dryRunDefault             = bool(false)
		enableChartCleanupDefault = bool(false)
		tillerHostDefault         = string("None")
		timeoutDefault            = int64(3600)
	)
	return &PostApplyManifestParams{
		DisableUpdatePost:  &disableUpdatePostDefault,
		DisableUpdatePre:   &disableUpdatePreDefault,
		DryRun:             &dryRunDefault,
		EnableChartCleanup: &enableChartCleanupDefault,
		TillerHost:         &tillerHostDefault,
		Timeout:            &timeoutDefault,

		requestTimeout: timeout,
	}
}

// NewPostApplyManifestParamsWithContext creates a new PostApplyManifestParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostApplyManifestParamsWithContext(ctx context.Context) *PostApplyManifestParams {
	var (
		disableUpdatePostDefault  = bool(false)
		disableUpdatePreDefault   = bool(false)
		dryRunDefault             = bool(false)
		enableChartCleanupDefault = bool(false)
		tillerHostDefault         = string("None")
		timeoutDefault            = int64(3600)
	)
	return &PostApplyManifestParams{
		DisableUpdatePost:  &disableUpdatePostDefault,
		DisableUpdatePre:   &disableUpdatePreDefault,
		DryRun:             &dryRunDefault,
		EnableChartCleanup: &enableChartCleanupDefault,
		TillerHost:         &tillerHostDefault,
		Timeout:            &timeoutDefault,

		Context: ctx,
	}
}

// NewPostApplyManifestParamsWithHTTPClient creates a new PostApplyManifestParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostApplyManifestParamsWithHTTPClient(client *http.Client) *PostApplyManifestParams {
	var (
		disableUpdatePostDefault  = bool(false)
		disableUpdatePreDefault   = bool(false)
		dryRunDefault             = bool(false)
		enableChartCleanupDefault = bool(false)
		tillerHostDefault         = string("None")
		timeoutDefault            = int64(3600)
	)
	return &PostApplyManifestParams{
		DisableUpdatePost:  &disableUpdatePostDefault,
		DisableUpdatePre:   &disableUpdatePreDefault,
		DryRun:             &dryRunDefault,
		EnableChartCleanup: &enableChartCleanupDefault,
		TillerHost:         &tillerHostDefault,
		Timeout:            &timeoutDefault,
		HTTPClient:         client,
	}
}

/*PostApplyManifestParams contains all the parameters to send to the API endpoint
for the post apply manifest operation typically these are written to a http.Request
*/
type PostApplyManifestParams struct {

	/*ContentType*/
	ContentType string
	/*XAuthToken
	  A fernet keystone bearer token used for authentication and authorization

	*/
	XAuthToken *string
	/*DisableUpdatePost*/
	DisableUpdatePost *bool
	/*DisableUpdatePre*/
	DisableUpdatePre *bool
	/*DryRun
	  Flag to simulate an action if set to True

	*/
	DryRun *bool
	/*EnableChartCleanup*/
	EnableChartCleanup *bool
	/*RequestBody
	  Body containing the manifest hrefs JSON or YAML and a set of overrides

	*/
	RequestBody PostApplyManifestBody
	/*TargetManifest
	  Specifies the manifest to target if there are multiples.

	*/
	TargetManifest *string
	/*TillerHost
	  Hostname of the Tiller server

	*/
	TillerHost *string
	/*TillerNamespace
	  Tiller namespace. Default is the value of `CONF.tiller_namespace`

	*/
	TillerNamespace *string
	/*TillerPort
	  Port number of the Tiller server. Default is the value of `CONF.tiller_port`.

	*/
	TillerPort *int64
	/*Timeout
	  Specifies time in seconds Tiller should wait for the action to complete before timing out.

	*/
	Timeout *int64
	/*Wait
	  Specifies whether Tiller should wait until the action is complete before returning.

	*/
	Wait *bool

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithRequestTimeout adds the timeout to the post apply manifest params
func (o *PostApplyManifestParams) WithRequestTimeout(timeout time.Duration) *PostApplyManifestParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the post apply manifest params
func (o *PostApplyManifestParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the post apply manifest params
func (o *PostApplyManifestParams) WithContext(ctx context.Context) *PostApplyManifestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post apply manifest params
func (o *PostApplyManifestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post apply manifest params
func (o *PostApplyManifestParams) WithHTTPClient(client *http.Client) *PostApplyManifestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post apply manifest params
func (o *PostApplyManifestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the post apply manifest params
func (o *PostApplyManifestParams) WithContentType(contentType string) *PostApplyManifestParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the post apply manifest params
func (o *PostApplyManifestParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithXAuthToken adds the xAuthToken to the post apply manifest params
func (o *PostApplyManifestParams) WithXAuthToken(xAuthToken *string) *PostApplyManifestParams {
	o.SetXAuthToken(xAuthToken)
	return o
}

// SetXAuthToken adds the xAuthToken to the post apply manifest params
func (o *PostApplyManifestParams) SetXAuthToken(xAuthToken *string) {
	o.XAuthToken = xAuthToken
}

// WithDisableUpdatePost adds the disableUpdatePost to the post apply manifest params
func (o *PostApplyManifestParams) WithDisableUpdatePost(disableUpdatePost *bool) *PostApplyManifestParams {
	o.SetDisableUpdatePost(disableUpdatePost)
	return o
}

// SetDisableUpdatePost adds the disableUpdatePost to the post apply manifest params
func (o *PostApplyManifestParams) SetDisableUpdatePost(disableUpdatePost *bool) {
	o.DisableUpdatePost = disableUpdatePost
}

// WithDisableUpdatePre adds the disableUpdatePre to the post apply manifest params
func (o *PostApplyManifestParams) WithDisableUpdatePre(disableUpdatePre *bool) *PostApplyManifestParams {
	o.SetDisableUpdatePre(disableUpdatePre)
	return o
}

// SetDisableUpdatePre adds the disableUpdatePre to the post apply manifest params
func (o *PostApplyManifestParams) SetDisableUpdatePre(disableUpdatePre *bool) {
	o.DisableUpdatePre = disableUpdatePre
}

// WithDryRun adds the dryRun to the post apply manifest params
func (o *PostApplyManifestParams) WithDryRun(dryRun *bool) *PostApplyManifestParams {
	o.SetDryRun(dryRun)
	return o
}

// SetDryRun adds the dryRun to the post apply manifest params
func (o *PostApplyManifestParams) SetDryRun(dryRun *bool) {
	o.DryRun = dryRun
}

// WithEnableChartCleanup adds the enableChartCleanup to the post apply manifest params
func (o *PostApplyManifestParams) WithEnableChartCleanup(enableChartCleanup *bool) *PostApplyManifestParams {
	o.SetEnableChartCleanup(enableChartCleanup)
	return o
}

// SetEnableChartCleanup adds the enableChartCleanup to the post apply manifest params
func (o *PostApplyManifestParams) SetEnableChartCleanup(enableChartCleanup *bool) {
	o.EnableChartCleanup = enableChartCleanup
}

// WithRequestBody adds the requestBody to the post apply manifest params
func (o *PostApplyManifestParams) WithRequestBody(requestBody PostApplyManifestBody) *PostApplyManifestParams {
	o.SetRequestBody(requestBody)
	return o
}

// SetRequestBody adds the requestBody to the post apply manifest params
func (o *PostApplyManifestParams) SetRequestBody(requestBody PostApplyManifestBody) {
	o.RequestBody = requestBody
}

// WithTargetManifest adds the targetManifest to the post apply manifest params
func (o *PostApplyManifestParams) WithTargetManifest(targetManifest *string) *PostApplyManifestParams {
	o.SetTargetManifest(targetManifest)
	return o
}

// SetTargetManifest adds the targetManifest to the post apply manifest params
func (o *PostApplyManifestParams) SetTargetManifest(targetManifest *string) {
	o.TargetManifest = targetManifest
}

// WithTillerHost adds the tillerHost to the post apply manifest params
func (o *PostApplyManifestParams) WithTillerHost(tillerHost *string) *PostApplyManifestParams {
	o.SetTillerHost(tillerHost)
	return o
}

// SetTillerHost adds the tillerHost to the post apply manifest params
func (o *PostApplyManifestParams) SetTillerHost(tillerHost *string) {
	o.TillerHost = tillerHost
}

// WithTillerNamespace adds the tillerNamespace to the post apply manifest params
func (o *PostApplyManifestParams) WithTillerNamespace(tillerNamespace *string) *PostApplyManifestParams {
	o.SetTillerNamespace(tillerNamespace)
	return o
}

// SetTillerNamespace adds the tillerNamespace to the post apply manifest params
func (o *PostApplyManifestParams) SetTillerNamespace(tillerNamespace *string) {
	o.TillerNamespace = tillerNamespace
}

// WithTillerPort adds the tillerPort to the post apply manifest params
func (o *PostApplyManifestParams) WithTillerPort(tillerPort *int64) *PostApplyManifestParams {
	o.SetTillerPort(tillerPort)
	return o
}

// SetTillerPort adds the tillerPort to the post apply manifest params
func (o *PostApplyManifestParams) SetTillerPort(tillerPort *int64) {
	o.TillerPort = tillerPort
}

// WithTimeout adds the timeout to the post apply manifest params
func (o *PostApplyManifestParams) WithTimeout(timeout *int64) *PostApplyManifestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post apply manifest params
func (o *PostApplyManifestParams) SetTimeout(timeout *int64) {
	o.Timeout = timeout
}

// WithWait adds the wait to the post apply manifest params
func (o *PostApplyManifestParams) WithWait(wait *bool) *PostApplyManifestParams {
	o.SetWait(wait)
	return o
}

// SetWait adds the wait to the post apply manifest params
func (o *PostApplyManifestParams) SetWait(wait *bool) {
	o.Wait = wait
}

// WriteToRequest writes these params to a swagger request
func (o *PostApplyManifestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	// header param Content-Type
	if err := r.SetHeaderParam("Content-Type", o.ContentType); err != nil {
		return err
	}

	if o.XAuthToken != nil {

		// header param X-Auth-Token
		if err := r.SetHeaderParam("X-Auth-Token", *o.XAuthToken); err != nil {
			return err
		}

	}

	if o.DisableUpdatePost != nil {

		// query param disable_update_post
		var qrDisableUpdatePost bool
		if o.DisableUpdatePost != nil {
			qrDisableUpdatePost = *o.DisableUpdatePost
		}
		qDisableUpdatePost := swag.FormatBool(qrDisableUpdatePost)
		if qDisableUpdatePost != "" {
			if err := r.SetQueryParam("disable_update_post", qDisableUpdatePost); err != nil {
				return err
			}
		}

	}

	if o.DisableUpdatePre != nil {

		// query param disable_update_pre
		var qrDisableUpdatePre bool
		if o.DisableUpdatePre != nil {
			qrDisableUpdatePre = *o.DisableUpdatePre
		}
		qDisableUpdatePre := swag.FormatBool(qrDisableUpdatePre)
		if qDisableUpdatePre != "" {
			if err := r.SetQueryParam("disable_update_pre", qDisableUpdatePre); err != nil {
				return err
			}
		}

	}

	if o.DryRun != nil {

		// query param dry_run
		var qrDryRun bool
		if o.DryRun != nil {
			qrDryRun = *o.DryRun
		}
		qDryRun := swag.FormatBool(qrDryRun)
		if qDryRun != "" {
			if err := r.SetQueryParam("dry_run", qDryRun); err != nil {
				return err
			}
		}

	}

	if o.EnableChartCleanup != nil {

		// query param enable_chart_cleanup
		var qrEnableChartCleanup bool
		if o.EnableChartCleanup != nil {
			qrEnableChartCleanup = *o.EnableChartCleanup
		}
		qEnableChartCleanup := swag.FormatBool(qrEnableChartCleanup)
		if qEnableChartCleanup != "" {
			if err := r.SetQueryParam("enable_chart_cleanup", qEnableChartCleanup); err != nil {
				return err
			}
		}

	}

	if err := r.SetBodyParam(o.RequestBody); err != nil {
		return err
	}

	if o.TargetManifest != nil {

		// query param target_manifest
		var qrTargetManifest string
		if o.TargetManifest != nil {
			qrTargetManifest = *o.TargetManifest
		}
		qTargetManifest := qrTargetManifest
		if qTargetManifest != "" {
			if err := r.SetQueryParam("target_manifest", qTargetManifest); err != nil {
				return err
			}
		}

	}

	if o.TillerHost != nil {

		// query param tiller_host
		var qrTillerHost string
		if o.TillerHost != nil {
			qrTillerHost = *o.TillerHost
		}
		qTillerHost := qrTillerHost
		if qTillerHost != "" {
			if err := r.SetQueryParam("tiller_host", qTillerHost); err != nil {
				return err
			}
		}

	}

	if o.TillerNamespace != nil {

		// query param tiller_namespace
		var qrTillerNamespace string
		if o.TillerNamespace != nil {
			qrTillerNamespace = *o.TillerNamespace
		}
		qTillerNamespace := qrTillerNamespace
		if qTillerNamespace != "" {
			if err := r.SetQueryParam("tiller_namespace", qTillerNamespace); err != nil {
				return err
			}
		}

	}

	if o.TillerPort != nil {

		// query param tiller_port
		var qrTillerPort int64
		if o.TillerPort != nil {
			qrTillerPort = *o.TillerPort
		}
		qTillerPort := swag.FormatInt64(qrTillerPort)
		if qTillerPort != "" {
			if err := r.SetQueryParam("tiller_port", qTillerPort); err != nil {
				return err
			}
		}

	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout int64
		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := swag.FormatInt64(qrTimeout)
		if qTimeout != "" {
			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}

	}

	if o.Wait != nil {

		// query param wait
		var qrWait bool
		if o.Wait != nil {
			qrWait = *o.Wait
		}
		qWait := swag.FormatBool(qrWait)
		if qWait != "" {
			if err := r.SetQueryParam("wait", qWait); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
