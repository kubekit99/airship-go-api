// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kubekit99/airship-go-api/armada/models"
)

// PostRollbackReleaseNameReader is a Reader for the PostRollbackReleaseName structure.
type PostRollbackReleaseNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRollbackReleaseNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostRollbackReleaseNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPostRollbackReleaseNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostRollbackReleaseNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPostRollbackReleaseNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostRollbackReleaseNameOK creates a PostRollbackReleaseNameOK with default headers values
func NewPostRollbackReleaseNameOK() *PostRollbackReleaseNameOK {
	return &PostRollbackReleaseNameOK{}
}

/*PostRollbackReleaseNameOK handles this case with default header values.

Response of a rollback of a specified release name
*/
type PostRollbackReleaseNameOK struct {
	Payload *PostRollbackReleaseNameOKBody
}

func (o *PostRollbackReleaseNameOK) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/rollback/{release_name}][%d] postRollbackReleaseNameOK  %+v", 200, o.Payload)
}

func (o *PostRollbackReleaseNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostRollbackReleaseNameOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRollbackReleaseNameUnauthorized creates a PostRollbackReleaseNameUnauthorized with default headers values
func NewPostRollbackReleaseNameUnauthorized() *PostRollbackReleaseNameUnauthorized {
	return &PostRollbackReleaseNameUnauthorized{}
}

/*PostRollbackReleaseNameUnauthorized handles this case with default header values.

401 Not authorized
*/
type PostRollbackReleaseNameUnauthorized struct {
}

func (o *PostRollbackReleaseNameUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/rollback/{release_name}][%d] postRollbackReleaseNameUnauthorized ", 401)
}

func (o *PostRollbackReleaseNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRollbackReleaseNameForbidden creates a PostRollbackReleaseNameForbidden with default headers values
func NewPostRollbackReleaseNameForbidden() *PostRollbackReleaseNameForbidden {
	return &PostRollbackReleaseNameForbidden{}
}

/*PostRollbackReleaseNameForbidden handles this case with default header values.

403 Forbidden
*/
type PostRollbackReleaseNameForbidden struct {
}

func (o *PostRollbackReleaseNameForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/rollback/{release_name}][%d] postRollbackReleaseNameForbidden ", 403)
}

func (o *PostRollbackReleaseNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRollbackReleaseNameInternalServerError creates a PostRollbackReleaseNameInternalServerError with default headers values
func NewPostRollbackReleaseNameInternalServerError() *PostRollbackReleaseNameInternalServerError {
	return &PostRollbackReleaseNameInternalServerError{}
}

/*PostRollbackReleaseNameInternalServerError handles this case with default header values.

500 Internal Server Error
*/
type PostRollbackReleaseNameInternalServerError struct {
}

func (o *PostRollbackReleaseNameInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/rollback/{release_name}][%d] postRollbackReleaseNameInternalServerError ", 500)
}

func (o *PostRollbackReleaseNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostRollbackReleaseNameOKBody post rollback release name o k body
swagger:model PostRollbackReleaseNameOKBody
*/
type PostRollbackReleaseNameOKBody struct {
	models.Rollbackresult
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostRollbackReleaseNameOKBody) UnmarshalJSON(raw []byte) error {
	// PostRollbackReleaseNameOKBodyAO0
	var postRollbackReleaseNameOKBodyAO0 models.Rollbackresult
	if err := swag.ReadJSON(raw, &postRollbackReleaseNameOKBodyAO0); err != nil {
		return err
	}
	o.Rollbackresult = postRollbackReleaseNameOKBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostRollbackReleaseNameOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postRollbackReleaseNameOKBodyAO0, err := swag.WriteJSON(o.Rollbackresult)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postRollbackReleaseNameOKBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post rollback release name o k body
func (o *PostRollbackReleaseNameOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Rollbackresult
	if err := o.Rollbackresult.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostRollbackReleaseNameOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostRollbackReleaseNameOKBody) UnmarshalBinary(b []byte) error {
	var res PostRollbackReleaseNameOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
