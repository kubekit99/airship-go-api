// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetHealth Returns the health of the system. [TO BE IMPLEMENTED]
*/
func (a *Client) GetHealth(params *GetHealthParams) (*GetHealthNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHealth",
		Method:             "GET",
		PathPattern:        "/api/v1.0/health",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHealthNoContent), nil

}

/*
GetReleases Returns list of Tiller releases
*/
func (a *Client) GetReleases(params *GetReleasesParams) (*GetReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReleases",
		Method:             "GET",
		PathPattern:        "/api/v1.0/releases",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReleasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReleasesOK), nil

}

/*
GetStatus Returns the status of Tiller
*/
func (a *Client) GetStatus(params *GetStatusParams) (*GetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStatus",
		Method:             "GET",
		PathPattern:        "/api/v1.0/status",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStatusOK), nil

}

/*
GetVersions Returns list of all supported versions of Armada. Currently this returns a static value.
*/
func (a *Client) GetVersions(params *GetVersionsParams) (*GetVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVersions",
		Method:             "GET",
		PathPattern:        "/versions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVersionsOK), nil

}

/*
PostApplyManifest Install or upgrade using an Armada manifest
*/
func (a *Client) PostApplyManifest(params *PostApplyManifestParams) (*PostApplyManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostApplyManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApplyManifest",
		Method:             "POST",
		PathPattern:        "/api/v1.0/apply",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/x-yaml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostApplyManifestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostApplyManifestOK), nil

}

/*
PostRollbackReleaseName Rollback the specified release name
*/
func (a *Client) PostRollbackReleaseName(params *PostRollbackReleaseNameParams) (*PostRollbackReleaseNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRollbackReleaseNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRollbackReleaseName",
		Method:             "POST",
		PathPattern:        "/api/v1.0/rollback/{release_name}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostRollbackReleaseNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRollbackReleaseNameOK), nil

}

/*
PostTestReleaseName Test specified release name
*/
func (a *Client) PostTestReleaseName(params *PostTestReleaseNameParams) (*PostTestReleaseNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTestReleaseNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTestReleaseName",
		Method:             "POST",
		PathPattern:        "/api/v1.0/test/{release_name}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostTestReleaseNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTestReleaseNameOK), nil

}

/*
PostTests Test manifest releases
*/
func (a *Client) PostTests(params *PostTestsParams) (*PostTestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTests",
		Method:             "POST",
		PathPattern:        "/api/v1.0/tests",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/x-yaml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostTestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTestsOK), nil

}

/*
PostValidateDesign Validate a design
*/
func (a *Client) PostValidateDesign(params *PostValidateDesignParams) (*PostValidateDesignOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostValidateDesignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postValidateDesign",
		Method:             "POST",
		PathPattern:        "/api/v1.0/validatedesign",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/x-yaml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostValidateDesignReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostValidateDesignOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
