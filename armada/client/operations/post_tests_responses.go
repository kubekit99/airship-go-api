// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kubekit99/airship-go-api/armada/models"
)

// PostTestsReader is a Reader for the PostTests structure.
type PostTestsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTestsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostTestsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostTestsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostTestsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostTestsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPostTestsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostTestsOK creates a PostTestsOK with default headers values
func NewPostTestsOK() *PostTestsOK {
	return &PostTestsOK{}
}

/*PostTestsOK handles this case with default header values.

Response of all tests
*/
type PostTestsOK struct {
	Payload *PostTestsOKBody
}

func (o *PostTestsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/tests][%d] postTestsOK  %+v", 200, o.Payload)
}

func (o *PostTestsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostTestsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTestsBadRequest creates a PostTestsBadRequest with default headers values
func NewPostTestsBadRequest() *PostTestsBadRequest {
	return &PostTestsBadRequest{}
}

/*PostTestsBadRequest handles this case with default header values.

400 Bad request
*/
type PostTestsBadRequest struct {
}

func (o *PostTestsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/tests][%d] postTestsBadRequest ", 400)
}

func (o *PostTestsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostTestsUnauthorized creates a PostTestsUnauthorized with default headers values
func NewPostTestsUnauthorized() *PostTestsUnauthorized {
	return &PostTestsUnauthorized{}
}

/*PostTestsUnauthorized handles this case with default header values.

401 Not authorized
*/
type PostTestsUnauthorized struct {
}

func (o *PostTestsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/tests][%d] postTestsUnauthorized ", 401)
}

func (o *PostTestsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostTestsForbidden creates a PostTestsForbidden with default headers values
func NewPostTestsForbidden() *PostTestsForbidden {
	return &PostTestsForbidden{}
}

/*PostTestsForbidden handles this case with default header values.

403 Forbidden
*/
type PostTestsForbidden struct {
}

func (o *PostTestsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/tests][%d] postTestsForbidden ", 403)
}

func (o *PostTestsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostTestsInternalServerError creates a PostTestsInternalServerError with default headers values
func NewPostTestsInternalServerError() *PostTestsInternalServerError {
	return &PostTestsInternalServerError{}
}

/*PostTestsInternalServerError handles this case with default header values.

500 Internal Server Error
*/
type PostTestsInternalServerError struct {
}

func (o *PostTestsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/tests][%d] postTestsInternalServerError ", 500)
}

func (o *PostTestsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostTestsOKBody post tests o k body
swagger:model PostTestsOKBody
*/
type PostTestsOKBody struct {
	models.BaseResponse
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostTestsOKBody) UnmarshalJSON(raw []byte) error {
	// PostTestsOKBodyAO0
	var postTestsOKBodyAO0 models.BaseResponse
	if err := swag.ReadJSON(raw, &postTestsOKBodyAO0); err != nil {
		return err
	}
	o.BaseResponse = postTestsOKBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostTestsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postTestsOKBodyAO0, err := swag.WriteJSON(o.BaseResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postTestsOKBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post tests o k body
func (o *PostTestsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.BaseResponse
	if err := o.BaseResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostTestsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTestsOKBody) UnmarshalBinary(b []byte) error {
	var res PostTestsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
