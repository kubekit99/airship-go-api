// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "github.com/kubekit99/airship-go-api/armada/models"
)

// PostRollbackReleaseNameHandlerFunc turns a function with the right signature into a post rollback release name handler
type PostRollbackReleaseNameHandlerFunc func(PostRollbackReleaseNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostRollbackReleaseNameHandlerFunc) Handle(params PostRollbackReleaseNameParams) middleware.Responder {
	return fn(params)
}

// PostRollbackReleaseNameHandler interface for that can handle valid post rollback release name params
type PostRollbackReleaseNameHandler interface {
	Handle(PostRollbackReleaseNameParams) middleware.Responder
}

// NewPostRollbackReleaseName creates a new http.Handler for the post rollback release name operation
func NewPostRollbackReleaseName(ctx *middleware.Context, handler PostRollbackReleaseNameHandler) *PostRollbackReleaseName {
	return &PostRollbackReleaseName{Context: ctx, Handler: handler}
}

/*PostRollbackReleaseName swagger:route POST /api/v1.0/rollback/{release_name} postRollbackReleaseName

Rollback the specified release name

*/
type PostRollbackReleaseName struct {
	Context *middleware.Context
	Handler PostRollbackReleaseNameHandler
}

func (o *PostRollbackReleaseName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostRollbackReleaseNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostRollbackReleaseNameOKBody post rollback release name o k body
// swagger:model PostRollbackReleaseNameOKBody
type PostRollbackReleaseNameOKBody struct {
	models.Rollbackresult
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostRollbackReleaseNameOKBody) UnmarshalJSON(raw []byte) error {
	// PostRollbackReleaseNameOKBodyAO0
	var postRollbackReleaseNameOKBodyAO0 models.Rollbackresult
	if err := swag.ReadJSON(raw, &postRollbackReleaseNameOKBodyAO0); err != nil {
		return err
	}
	o.Rollbackresult = postRollbackReleaseNameOKBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostRollbackReleaseNameOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postRollbackReleaseNameOKBodyAO0, err := swag.WriteJSON(o.Rollbackresult)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postRollbackReleaseNameOKBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post rollback release name o k body
func (o *PostRollbackReleaseNameOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Rollbackresult
	if err := o.Rollbackresult.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostRollbackReleaseNameOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostRollbackReleaseNameOKBody) UnmarshalBinary(b []byte) error {
	var res PostRollbackReleaseNameOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
