// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "github.com/kubekit99/airship-go-api/armada/models"
)

// PostValidateDesignHandlerFunc turns a function with the right signature into a post validate design handler
type PostValidateDesignHandlerFunc func(PostValidateDesignParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostValidateDesignHandlerFunc) Handle(params PostValidateDesignParams) middleware.Responder {
	return fn(params)
}

// PostValidateDesignHandler interface for that can handle valid post validate design params
type PostValidateDesignHandler interface {
	Handle(PostValidateDesignParams) middleware.Responder
}

// NewPostValidateDesign creates a new http.Handler for the post validate design operation
func NewPostValidateDesign(ctx *middleware.Context, handler PostValidateDesignHandler) *PostValidateDesign {
	return &PostValidateDesign{Context: ctx, Handler: handler}
}

/*PostValidateDesign swagger:route POST /api/v1.0/validatedesign postValidateDesign

Validate a design

*/
type PostValidateDesign struct {
	Context *middleware.Context
	Handler PostValidateDesignHandler
}

func (o *PostValidateDesign) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostValidateDesignParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostValidateDesignOKBody post validate design o k body
// swagger:model PostValidateDesignOKBody
type PostValidateDesignOKBody struct {
	models.BaseResponse
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostValidateDesignOKBody) UnmarshalJSON(raw []byte) error {
	// PostValidateDesignOKBodyAO0
	var postValidateDesignOKBodyAO0 models.BaseResponse
	if err := swag.ReadJSON(raw, &postValidateDesignOKBodyAO0); err != nil {
		return err
	}
	o.BaseResponse = postValidateDesignOKBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostValidateDesignOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postValidateDesignOKBodyAO0, err := swag.WriteJSON(o.BaseResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postValidateDesignOKBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post validate design o k body
func (o *PostValidateDesignOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.BaseResponse
	if err := o.BaseResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostValidateDesignOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostValidateDesignOKBody) UnmarshalBinary(b []byte) error {
	var res PostValidateDesignOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
