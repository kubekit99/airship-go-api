// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostApplyManifestParams creates a new PostApplyManifestParams object
// with the default values initialized.
func NewPostApplyManifestParams() PostApplyManifestParams {

	var (
		// initialize parameters with default values

		disableUpdatePostDefault  = bool(false)
		disableUpdatePreDefault   = bool(false)
		dryRunDefault             = bool(false)
		enableChartCleanupDefault = bool(false)

		tillerHostDefault = string("None")

		timeoutDefault = int64(3600)
	)

	return PostApplyManifestParams{
		DisableUpdatePost: &disableUpdatePostDefault,

		DisableUpdatePre: &disableUpdatePreDefault,

		DryRun: &dryRunDefault,

		EnableChartCleanup: &enableChartCleanupDefault,

		TillerHost: &tillerHostDefault,

		Timeout: &timeoutDefault,
	}
}

// PostApplyManifestParams contains all the bound params for the post apply manifest operation
// typically these are obtained from a http.Request
//
// swagger:parameters postApplyManifest
type PostApplyManifestParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: header
	*/
	ContentType string
	/*A fernet keystone bearer token used for authentication and authorization
	  In: header
	*/
	XAuthToken *string
	/*
	  In: query
	  Default: false
	*/
	DisableUpdatePost *bool
	/*
	  In: query
	  Default: false
	*/
	DisableUpdatePre *bool
	/*Flag to simulate an action if set to True
	  In: query
	  Default: false
	*/
	DryRun *bool
	/*
	  In: query
	  Default: false
	*/
	EnableChartCleanup *bool
	/*Body containing the manifest hrefs JSON or YAML and a set of overrides
	  In: body
	*/
	RequestBody PostApplyManifestBody
	/*Specifies the manifest to target if there are multiples.
	  In: query
	*/
	TargetManifest *string
	/*Hostname of the Tiller server
	  In: query
	  Default: "None"
	*/
	TillerHost *string
	/*Tiller namespace. Default is the value of `CONF.tiller_namespace`
	  In: query
	*/
	TillerNamespace *string
	/*Port number of the Tiller server. Default is the value of `CONF.tiller_port`.
	  In: query
	*/
	TillerPort *int64
	/*Specifies time in seconds Tiller should wait for the action to complete before timing out.
	  In: query
	  Default: 3600
	*/
	Timeout *int64
	/*Specifies whether Tiller should wait until the action is complete before returning.
	  In: query
	*/
	Wait *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostApplyManifestParams() beforehand.
func (o *PostApplyManifestParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindContentType(r.Header[http.CanonicalHeaderKey("Content-Type")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindXAuthToken(r.Header[http.CanonicalHeaderKey("X-Auth-Token")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	qDisableUpdatePost, qhkDisableUpdatePost, _ := qs.GetOK("disable_update_post")
	if err := o.bindDisableUpdatePost(qDisableUpdatePost, qhkDisableUpdatePost, route.Formats); err != nil {
		res = append(res, err)
	}

	qDisableUpdatePre, qhkDisableUpdatePre, _ := qs.GetOK("disable_update_pre")
	if err := o.bindDisableUpdatePre(qDisableUpdatePre, qhkDisableUpdatePre, route.Formats); err != nil {
		res = append(res, err)
	}

	qDryRun, qhkDryRun, _ := qs.GetOK("dry_run")
	if err := o.bindDryRun(qDryRun, qhkDryRun, route.Formats); err != nil {
		res = append(res, err)
	}

	qEnableChartCleanup, qhkEnableChartCleanup, _ := qs.GetOK("enable_chart_cleanup")
	if err := o.bindEnableChartCleanup(qEnableChartCleanup, qhkEnableChartCleanup, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body PostApplyManifestBody
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("requestBody", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.RequestBody = body
			}
		}
	}
	qTargetManifest, qhkTargetManifest, _ := qs.GetOK("target_manifest")
	if err := o.bindTargetManifest(qTargetManifest, qhkTargetManifest, route.Formats); err != nil {
		res = append(res, err)
	}

	qTillerHost, qhkTillerHost, _ := qs.GetOK("tiller_host")
	if err := o.bindTillerHost(qTillerHost, qhkTillerHost, route.Formats); err != nil {
		res = append(res, err)
	}

	qTillerNamespace, qhkTillerNamespace, _ := qs.GetOK("tiller_namespace")
	if err := o.bindTillerNamespace(qTillerNamespace, qhkTillerNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	qTillerPort, qhkTillerPort, _ := qs.GetOK("tiller_port")
	if err := o.bindTillerPort(qTillerPort, qhkTillerPort, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimeout, qhkTimeout, _ := qs.GetOK("timeout")
	if err := o.bindTimeout(qTimeout, qhkTimeout, route.Formats); err != nil {
		res = append(res, err)
	}

	qWait, qhkWait, _ := qs.GetOK("wait")
	if err := o.bindWait(qWait, qhkWait, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindContentType binds and validates parameter ContentType from header.
func (o *PostApplyManifestParams) bindContentType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("Content-Type", "header")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("Content-Type", "header", raw); err != nil {
		return err
	}

	o.ContentType = raw

	return nil
}

// bindXAuthToken binds and validates parameter XAuthToken from header.
func (o *PostApplyManifestParams) bindXAuthToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.XAuthToken = &raw

	return nil
}

// bindDisableUpdatePost binds and validates parameter DisableUpdatePost from query.
func (o *PostApplyManifestParams) bindDisableUpdatePost(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostApplyManifestParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("disable_update_post", "query", "bool", raw)
	}
	o.DisableUpdatePost = &value

	return nil
}

// bindDisableUpdatePre binds and validates parameter DisableUpdatePre from query.
func (o *PostApplyManifestParams) bindDisableUpdatePre(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostApplyManifestParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("disable_update_pre", "query", "bool", raw)
	}
	o.DisableUpdatePre = &value

	return nil
}

// bindDryRun binds and validates parameter DryRun from query.
func (o *PostApplyManifestParams) bindDryRun(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostApplyManifestParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("dry_run", "query", "bool", raw)
	}
	o.DryRun = &value

	return nil
}

// bindEnableChartCleanup binds and validates parameter EnableChartCleanup from query.
func (o *PostApplyManifestParams) bindEnableChartCleanup(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostApplyManifestParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("enable_chart_cleanup", "query", "bool", raw)
	}
	o.EnableChartCleanup = &value

	return nil
}

// bindTargetManifest binds and validates parameter TargetManifest from query.
func (o *PostApplyManifestParams) bindTargetManifest(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.TargetManifest = &raw

	return nil
}

// bindTillerHost binds and validates parameter TillerHost from query.
func (o *PostApplyManifestParams) bindTillerHost(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostApplyManifestParams()
		return nil
	}

	o.TillerHost = &raw

	return nil
}

// bindTillerNamespace binds and validates parameter TillerNamespace from query.
func (o *PostApplyManifestParams) bindTillerNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.TillerNamespace = &raw

	return nil
}

// bindTillerPort binds and validates parameter TillerPort from query.
func (o *PostApplyManifestParams) bindTillerPort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("tiller_port", "query", "int64", raw)
	}
	o.TillerPort = &value

	return nil
}

// bindTimeout binds and validates parameter Timeout from query.
func (o *PostApplyManifestParams) bindTimeout(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostApplyManifestParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("timeout", "query", "int64", raw)
	}
	o.Timeout = &value

	return nil
}

// bindWait binds and validates parameter Wait from query.
func (o *PostApplyManifestParams) bindWait(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("wait", "query", "bool", raw)
	}
	o.Wait = &value

	return nil
}
