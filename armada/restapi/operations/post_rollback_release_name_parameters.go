// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostRollbackReleaseNameParams creates a new PostRollbackReleaseNameParams object
// with the default values initialized.
func NewPostRollbackReleaseNameParams() PostRollbackReleaseNameParams {

	var (
		// initialize parameters with default values

		dryRunDefault       = bool(false)
		forceDefault        = bool(false)
		recreatePodsDefault = bool(false)

		tillerHostDefault = string("None")

		timeoutDefault = int64(3600)
		versionDefault = int64(0)
	)

	return PostRollbackReleaseNameParams{
		DryRun: &dryRunDefault,

		Force: &forceDefault,

		RecreatePods: &recreatePodsDefault,

		TillerHost: &tillerHostDefault,

		Timeout: &timeoutDefault,

		Version: &versionDefault,
	}
}

// PostRollbackReleaseNameParams contains all the bound params for the post rollback release name operation
// typically these are obtained from a http.Request
//
// swagger:parameters postRollbackReleaseName
type PostRollbackReleaseNameParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*A fernet keystone bearer token used for authentication and authorization
	  In: header
	*/
	XAuthToken *string
	/*Flag to simulate an action if set to True
	  In: query
	  Default: false
	*/
	DryRun *bool
	/*Specifies whether to force resource update through delete/recreate if needed.
	  In: query
	  Default: false
	*/
	Force *bool
	/*Specifies whether to restart pods for the resource if applicable.
	  In: query
	  Default: false
	*/
	RecreatePods *bool
	/*Name of the release to be rolled back
	  Required: true
	  In: path
	*/
	ReleaseName string
	/*Hostname of the Tiller server
	  In: query
	  Default: "None"
	*/
	TillerHost *string
	/*Tiller namespace. Default is the value of `CONF.tiller_namespace`
	  In: query
	*/
	TillerNamespace *string
	/*Port number of the Tiller server. Default is the value of `CONF.tiller_port`.
	  In: query
	*/
	TillerPort *int64
	/*Specifies time in seconds Tiller should wait for the action to complete before timing out.
	  In: query
	  Default: 3600
	*/
	Timeout *int64
	/*Version number of release to rollback to. 0 represents the previous version
	  In: query
	  Default: 0
	*/
	Version *int64
	/*Specifies whether Tiller should wait until the action is complete before returning.
	  In: query
	*/
	Wait *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostRollbackReleaseNameParams() beforehand.
func (o *PostRollbackReleaseNameParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindXAuthToken(r.Header[http.CanonicalHeaderKey("X-Auth-Token")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	qDryRun, qhkDryRun, _ := qs.GetOK("dry_run")
	if err := o.bindDryRun(qDryRun, qhkDryRun, route.Formats); err != nil {
		res = append(res, err)
	}

	qForce, qhkForce, _ := qs.GetOK("force")
	if err := o.bindForce(qForce, qhkForce, route.Formats); err != nil {
		res = append(res, err)
	}

	qRecreatePods, qhkRecreatePods, _ := qs.GetOK("recreate_pods")
	if err := o.bindRecreatePods(qRecreatePods, qhkRecreatePods, route.Formats); err != nil {
		res = append(res, err)
	}

	rReleaseName, rhkReleaseName, _ := route.Params.GetOK("release_name")
	if err := o.bindReleaseName(rReleaseName, rhkReleaseName, route.Formats); err != nil {
		res = append(res, err)
	}

	qTillerHost, qhkTillerHost, _ := qs.GetOK("tiller_host")
	if err := o.bindTillerHost(qTillerHost, qhkTillerHost, route.Formats); err != nil {
		res = append(res, err)
	}

	qTillerNamespace, qhkTillerNamespace, _ := qs.GetOK("tiller_namespace")
	if err := o.bindTillerNamespace(qTillerNamespace, qhkTillerNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	qTillerPort, qhkTillerPort, _ := qs.GetOK("tiller_port")
	if err := o.bindTillerPort(qTillerPort, qhkTillerPort, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimeout, qhkTimeout, _ := qs.GetOK("timeout")
	if err := o.bindTimeout(qTimeout, qhkTimeout, route.Formats); err != nil {
		res = append(res, err)
	}

	qVersion, qhkVersion, _ := qs.GetOK("version")
	if err := o.bindVersion(qVersion, qhkVersion, route.Formats); err != nil {
		res = append(res, err)
	}

	qWait, qhkWait, _ := qs.GetOK("wait")
	if err := o.bindWait(qWait, qhkWait, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXAuthToken binds and validates parameter XAuthToken from header.
func (o *PostRollbackReleaseNameParams) bindXAuthToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.XAuthToken = &raw

	return nil
}

// bindDryRun binds and validates parameter DryRun from query.
func (o *PostRollbackReleaseNameParams) bindDryRun(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostRollbackReleaseNameParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("dry_run", "query", "bool", raw)
	}
	o.DryRun = &value

	return nil
}

// bindForce binds and validates parameter Force from query.
func (o *PostRollbackReleaseNameParams) bindForce(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostRollbackReleaseNameParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("force", "query", "bool", raw)
	}
	o.Force = &value

	return nil
}

// bindRecreatePods binds and validates parameter RecreatePods from query.
func (o *PostRollbackReleaseNameParams) bindRecreatePods(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostRollbackReleaseNameParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("recreate_pods", "query", "bool", raw)
	}
	o.RecreatePods = &value

	return nil
}

// bindReleaseName binds and validates parameter ReleaseName from path.
func (o *PostRollbackReleaseNameParams) bindReleaseName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ReleaseName = raw

	return nil
}

// bindTillerHost binds and validates parameter TillerHost from query.
func (o *PostRollbackReleaseNameParams) bindTillerHost(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostRollbackReleaseNameParams()
		return nil
	}

	o.TillerHost = &raw

	return nil
}

// bindTillerNamespace binds and validates parameter TillerNamespace from query.
func (o *PostRollbackReleaseNameParams) bindTillerNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.TillerNamespace = &raw

	return nil
}

// bindTillerPort binds and validates parameter TillerPort from query.
func (o *PostRollbackReleaseNameParams) bindTillerPort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("tiller_port", "query", "int64", raw)
	}
	o.TillerPort = &value

	return nil
}

// bindTimeout binds and validates parameter Timeout from query.
func (o *PostRollbackReleaseNameParams) bindTimeout(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostRollbackReleaseNameParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("timeout", "query", "int64", raw)
	}
	o.Timeout = &value

	return nil
}

// bindVersion binds and validates parameter Version from query.
func (o *PostRollbackReleaseNameParams) bindVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostRollbackReleaseNameParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("version", "query", "int64", raw)
	}
	o.Version = &value

	return nil
}

// bindWait binds and validates parameter Wait from query.
func (o *PostRollbackReleaseNameParams) bindWait(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("wait", "query", "bool", raw)
	}
	o.Wait = &value

	return nil
}
