// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Armada provides operators a way to deploy or upgrade collection of helm\ncharts using a single command.\n",
    "title": "Armada",
    "contact": {
      "name": "Armada Github Repository",
      "url": "https://github.com/openstack/airship-armada"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.1.0"
  },
  "basePath": "/",
  "paths": {
    "/api/v1.0/apply": {
      "post": {
        "description": "Install or upgrade using an Armada manifest",
        "consumes": [
          "application/json",
          "application/x-yaml"
        ],
        "operationId": "postApplyManifest",
        "parameters": [
          {
            "$ref": "#/parameters/x-auth-token"
          },
          {
            "$ref": "#/parameters/content-type"
          },
          {
            "$ref": "#/parameters/tiller-host"
          },
          {
            "$ref": "#/parameters/tiller-port"
          },
          {
            "$ref": "#/parameters/tiller-namespace"
          },
          {
            "$ref": "#/parameters/target-manifest"
          },
          {
            "$ref": "#/parameters/disable-update-pre"
          },
          {
            "$ref": "#/parameters/disable-update-post"
          },
          {
            "$ref": "#/parameters/enable-chart-cleanup"
          },
          {
            "$ref": "#/parameters/dry-run"
          },
          {
            "$ref": "#/parameters/wait"
          },
          {
            "$ref": "#/parameters/timeout"
          },
          {
            "description": "Body containing the manifest hrefs JSON or YAML and a set of overrides",
            "name": "request_body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "hrefs": {
                  "description": "JSON or YAML representation of the manifest being processed.",
                  "type": "object"
                },
                "overrides": {
                  "description": "Set of overrides",
                  "type": "object"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response-post-apply"
          },
          "400": {
            "$ref": "#/responses/err-bad-request"
          },
          "401": {
            "$ref": "#/responses/err-no-auth"
          },
          "403": {
            "$ref": "#/responses/err-forbidden"
          },
          "415": {
            "$ref": "#/responses/err-unsupported-media-type"
          },
          "500": {
            "$ref": "#/responses/err-server-error"
          }
        }
      }
    },
    "/api/v1.0/health": {
      "get": {
        "description": "Returns the health of the system. [TO BE IMPLEMENTED]",
        "operationId": "getHealth",
        "parameters": [
          {
            "$ref": "#/parameters/x-auth-token"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates the system is healthy. This is currently the default return."
          },
          "503": {
            "description": "Indicates the system is not healthy.  This is not yet implemented."
          }
        }
      }
    },
    "/api/v1.0/releases": {
      "get": {
        "description": "Returns list of Tiller releases",
        "operationId": "getReleases",
        "parameters": [
          {
            "$ref": "#/parameters/x-auth-token"
          },
          {
            "$ref": "#/parameters/tiller-host"
          },
          {
            "$ref": "#/parameters/tiller-port"
          },
          {
            "$ref": "#/parameters/tiller-namespace"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response-get-releases"
          },
          "401": {
            "$ref": "#/responses/err-no-auth"
          },
          "403": {
            "$ref": "#/responses/err-forbidden"
          },
          "500": {
            "$ref": "#/responses/err-server-error"
          }
        }
      }
    },
    "/api/v1.0/rollback/{release_name}": {
      "post": {
        "description": "Rollback the specified release name",
        "operationId": "postRollbackReleaseName",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the release to be rolled back",
            "name": "release_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Version number of release to rollback to. 0 represents the previous version",
            "name": "version",
            "in": "query"
          },
          {
            "$ref": "#/parameters/x-auth-token"
          },
          {
            "$ref": "#/parameters/tiller-host"
          },
          {
            "$ref": "#/parameters/tiller-port"
          },
          {
            "$ref": "#/parameters/tiller-namespace"
          },
          {
            "$ref": "#/parameters/dry-run"
          },
          {
            "$ref": "#/parameters/wait"
          },
          {
            "$ref": "#/parameters/timeout"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "$ref": "#/parameters/recreate-pods"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response-post-rollback-release"
          },
          "401": {
            "$ref": "#/responses/err-no-auth"
          },
          "403": {
            "$ref": "#/responses/err-forbidden"
          },
          "500": {
            "$ref": "#/responses/err-server-error"
          }
        }
      }
    },
    "/api/v1.0/status": {
      "get": {
        "description": "Returns the status of Tiller",
        "operationId": "getStatus",
        "parameters": [
          {
            "$ref": "#/parameters/x-auth-token"
          },
          {
            "$ref": "#/parameters/tiller-host"
          },
          {
            "$ref": "#/parameters/tiller-port"
          },
          {
            "$ref": "#/parameters/tiller-namespace"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response-get-status"
          },
          "401": {
            "$ref": "#/responses/err-no-auth"
          },
          "403": {
            "$ref": "#/responses/err-forbidden"
          },
          "500": {
            "$ref": "#/responses/err-server-error"
          }
        }
      }
    },
    "/api/v1.0/test/{release_name}": {
      "post": {
        "description": "Test specified release name",
        "operationId": "postTestReleaseName",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the release to be tested",
            "name": "release_name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/x-auth-token"
          },
          {
            "$ref": "#/parameters/tiller-host"
          },
          {
            "$ref": "#/parameters/tiller-port"
          },
          {
            "$ref": "#/parameters/tiller-namespace"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response-post-test-release"
          },
          "401": {
            "$ref": "#/responses/err-no-auth"
          },
          "403": {
            "$ref": "#/responses/err-forbidden"
          },
          "500": {
            "$ref": "#/responses/err-server-error"
          }
        }
      }
    },
    "/api/v1.0/tests": {
      "post": {
        "description": "Test manifest releases",
        "consumes": [
          "application/json",
          "application/x-yaml"
        ],
        "operationId": "postTests",
        "parameters": [
          {
            "$ref": "#/parameters/x-auth-token"
          },
          {
            "$ref": "#/parameters/tiller-host"
          },
          {
            "$ref": "#/parameters/tiller-port"
          },
          {
            "$ref": "#/parameters/tiller-namespace"
          },
          {
            "$ref": "#/parameters/target-manifest"
          },
          {
            "description": "JSON or YAML representation of the manifest being processed.",
            "name": "request_body",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response-post-tests"
          },
          "400": {
            "$ref": "#/responses/err-bad-request"
          },
          "401": {
            "$ref": "#/responses/err-no-auth"
          },
          "403": {
            "$ref": "#/responses/err-forbidden"
          },
          "500": {
            "$ref": "#/responses/err-server-error"
          }
        }
      }
    },
    "/api/v1.0/validatedesign": {
      "post": {
        "description": "Validate a design",
        "consumes": [
          "application/json",
          "application/x-yaml"
        ],
        "operationId": "postValidateDesign",
        "parameters": [
          {
            "$ref": "#/parameters/x-auth-token"
          },
          {
            "description": "JSON or YAML representation of the manifest being processed.",
            "name": "request_body",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response-post-validatedesign"
          },
          "400": {
            "$ref": "#/responses/err-bad-request"
          },
          "401": {
            "$ref": "#/responses/err-no-auth"
          },
          "403": {
            "$ref": "#/responses/err-forbidden"
          }
        }
      }
    },
    "/versions": {
      "get": {
        "description": "Returns list of all supported versions of Armada. Currently this returns a static value.",
        "operationId": "getVersions",
        "responses": {
          "200": {
            "$ref": "#/responses/response-get-versions"
          }
        }
      }
    }
  },
  "definitions": {
    "applyresult": {
      "type": "object",
      "properties": {
        "message": {
          "type": "object",
          "properties": {
            "diff": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "install": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "upgrade": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "base-response": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "code": {
          "type": "integer"
        },
        "details": {
          "$ref": "#/definitions/detail"
        },
        "kind": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "detail": {
      "type": "object",
      "properties": {
        "errorCount": {
          "type": "integer"
        },
        "messageList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "metadata": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "releases": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "rollbackresult": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "status": {
      "type": "object",
      "properties": {
        "tiller": {
          "type": "object",
          "properties": {
            "state": {
              "type": "boolean"
            },
            "version": {
              "type": "string"
            }
          }
        }
      }
    },
    "testresult": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "result": {
          "type": "string"
        }
      }
    },
    "version": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "versions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/version"
      }
    }
  },
  "parameters": {
    "content-type": {
      "type": "string",
      "name": "Content-Type",
      "in": "header",
      "required": true
    },
    "disable-update-post": {
      "type": "boolean",
      "default": false,
      "name": "disable_update_post",
      "in": "query"
    },
    "disable-update-pre": {
      "type": "boolean",
      "default": false,
      "name": "disable_update_pre",
      "in": "query"
    },
    "dry-run": {
      "type": "boolean",
      "default": false,
      "description": "Flag to simulate an action if set to True",
      "name": "dry_run",
      "in": "query"
    },
    "enable-chart-cleanup": {
      "type": "boolean",
      "default": false,
      "name": "enable_chart_cleanup",
      "in": "query"
    },
    "force": {
      "type": "boolean",
      "default": false,
      "description": "Specifies whether to force resource update through delete/recreate if needed.",
      "name": "force",
      "in": "query"
    },
    "recreate-pods": {
      "type": "boolean",
      "default": false,
      "description": "Specifies whether to restart pods for the resource if applicable.",
      "name": "recreate_pods",
      "in": "query"
    },
    "target-manifest": {
      "type": "string",
      "description": "Specifies the manifest to target if there are multiples.",
      "name": "target_manifest",
      "in": "query"
    },
    "tiller-host": {
      "type": "string",
      "default": "None",
      "description": "Hostname of the Tiller server",
      "name": "tiller_host",
      "in": "query"
    },
    "tiller-namespace": {
      "type": "string",
      "description": "Tiller namespace. Default is the value of ` + "`" + `CONF.tiller_namespace` + "`" + `",
      "name": "tiller_namespace",
      "in": "query"
    },
    "tiller-port": {
      "type": "integer",
      "description": "Port number of the Tiller server. Default is the value of ` + "`" + `CONF.tiller_port` + "`" + `.",
      "name": "tiller_port",
      "in": "query"
    },
    "timeout": {
      "type": "integer",
      "default": 3600,
      "description": "Specifies time in seconds Tiller should wait for the action to complete before timing out.",
      "name": "timeout",
      "in": "query"
    },
    "wait": {
      "type": "boolean",
      "description": "Specifies whether Tiller should wait until the action is complete before returning.",
      "name": "wait",
      "in": "query"
    },
    "x-auth-token": {
      "type": "string",
      "description": "A fernet keystone bearer token used for authentication and authorization",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "responses": {
    "err-bad-request": {
      "description": "400 Bad request"
    },
    "err-forbidden": {
      "description": "403 Forbidden"
    },
    "err-no-auth": {
      "description": "401 Not authorized"
    },
    "err-not-allowed": {
      "description": "405 Method not allowed"
    },
    "err-not-found": {
      "description": "404 Not found"
    },
    "err-server-error": {
      "description": "500 Internal Server Error"
    },
    "err-unsupported-media-type": {
      "description": "415 Unsupported Media Type\n\nMime type needs to be application/json or application/x-yaml.\n"
    },
    "response-get-releases": {
      "description": "Response of all namespaces and releases contained within",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/releases"
          }
        ],
        "example": {
          "namespace-one": [
            "release-A",
            "release-B"
          ],
          "namespace-two": [
            "other-release-X",
            "other-release-Y"
          ]
        }
      }
    },
    "response-get-status": {
      "description": "Response of Tiller statuses",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/status"
          }
        ],
        "example": {
          "tiller": {
            "state": true,
            "version": "0.1.0"
          }
        }
      }
    },
    "response-get-versions": {
      "description": "Response of getting Armada versions",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/versions"
          }
        ],
        "example": {
          "v1.0": {
            "path": "/api/v1.0",
            "status": "stable"
          }
        }
      }
    },
    "response-post-apply": {
      "description": "Response of application of an Armada manifest",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/applyresult"
          }
        ]
      }
    },
    "response-post-rollback-release": {
      "description": "Response of a rollback of a specified release name",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/rollbackresult"
          }
        ],
        "example": {
          "message": "Rollback of release xyz complete"
        }
      }
    },
    "response-post-test-release": {
      "description": "Response of a test of a specified release name",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/testresult"
          }
        ],
        "example": {
          "message": "MESSAGE: No test found",
          "result": "FAILED: \u003creason\u003e"
        }
      }
    },
    "response-post-tests": {
      "description": "Response of all tests",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/base-response"
          }
        ],
        "example": {
          "apiVersion": "v1.0",
          "code": 400,
          "details": null,
          "kind": "Status",
          "message": "Failed to validate documents or generate Armada Manifest from documents..",
          "metadata": {},
          "reason": "Validation",
          "status": "Failure"
        }
      }
    },
    "response-post-validatedesign": {
      "description": "Response of a validation check",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/base-response"
          }
        ],
        "example": {
          "apiVersion": "v1.0",
          "code": 200,
          "details": null,
          "kind": "Status",
          "message": "Armada validations succeeded.",
          "metadata": {},
          "reason": "Validation",
          "status": "Success"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Armada provides operators a way to deploy or upgrade collection of helm\ncharts using a single command.\n",
    "title": "Armada",
    "contact": {
      "name": "Armada Github Repository",
      "url": "https://github.com/openstack/airship-armada"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.1.0"
  },
  "basePath": "/",
  "paths": {
    "/api/v1.0/apply": {
      "post": {
        "description": "Install or upgrade using an Armada manifest",
        "consumes": [
          "application/json",
          "application/x-yaml"
        ],
        "operationId": "postApplyManifest",
        "parameters": [
          {
            "type": "string",
            "description": "A fernet keystone bearer token used for authentication and authorization",
            "name": "X-Auth-Token",
            "in": "header"
          },
          {
            "type": "string",
            "name": "Content-Type",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "default": "None",
            "description": "Hostname of the Tiller server",
            "name": "tiller_host",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Port number of the Tiller server. Default is the value of ` + "`" + `CONF.tiller_port` + "`" + `.",
            "name": "tiller_port",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Tiller namespace. Default is the value of ` + "`" + `CONF.tiller_namespace` + "`" + `",
            "name": "tiller_namespace",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the manifest to target if there are multiples.",
            "name": "target_manifest",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "disable_update_pre",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "disable_update_post",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "enable_chart_cleanup",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Flag to simulate an action if set to True",
            "name": "dry_run",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Specifies whether Tiller should wait until the action is complete before returning.",
            "name": "wait",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 3600,
            "description": "Specifies time in seconds Tiller should wait for the action to complete before timing out.",
            "name": "timeout",
            "in": "query"
          },
          {
            "description": "Body containing the manifest hrefs JSON or YAML and a set of overrides",
            "name": "request_body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "hrefs": {
                  "description": "JSON or YAML representation of the manifest being processed.",
                  "type": "object"
                },
                "overrides": {
                  "description": "Set of overrides",
                  "type": "object"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response of application of an Armada manifest",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/applyresult"
                }
              ]
            }
          },
          "400": {
            "description": "400 Bad request"
          },
          "401": {
            "description": "401 Not authorized"
          },
          "403": {
            "description": "403 Forbidden"
          },
          "415": {
            "description": "415 Unsupported Media Type\n\nMime type needs to be application/json or application/x-yaml.\n"
          },
          "500": {
            "description": "500 Internal Server Error"
          }
        }
      }
    },
    "/api/v1.0/health": {
      "get": {
        "description": "Returns the health of the system. [TO BE IMPLEMENTED]",
        "operationId": "getHealth",
        "parameters": [
          {
            "type": "string",
            "description": "A fernet keystone bearer token used for authentication and authorization",
            "name": "X-Auth-Token",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates the system is healthy. This is currently the default return."
          },
          "503": {
            "description": "Indicates the system is not healthy.  This is not yet implemented."
          }
        }
      }
    },
    "/api/v1.0/releases": {
      "get": {
        "description": "Returns list of Tiller releases",
        "operationId": "getReleases",
        "parameters": [
          {
            "type": "string",
            "description": "A fernet keystone bearer token used for authentication and authorization",
            "name": "X-Auth-Token",
            "in": "header"
          },
          {
            "type": "string",
            "default": "None",
            "description": "Hostname of the Tiller server",
            "name": "tiller_host",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Port number of the Tiller server. Default is the value of ` + "`" + `CONF.tiller_port` + "`" + `.",
            "name": "tiller_port",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Tiller namespace. Default is the value of ` + "`" + `CONF.tiller_namespace` + "`" + `",
            "name": "tiller_namespace",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Response of all namespaces and releases contained within",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/releases"
                }
              ],
              "example": {
                "namespace-one": [
                  "release-A",
                  "release-B"
                ],
                "namespace-two": [
                  "other-release-X",
                  "other-release-Y"
                ]
              }
            }
          },
          "401": {
            "description": "401 Not authorized"
          },
          "403": {
            "description": "403 Forbidden"
          },
          "500": {
            "description": "500 Internal Server Error"
          }
        }
      }
    },
    "/api/v1.0/rollback/{release_name}": {
      "post": {
        "description": "Rollback the specified release name",
        "operationId": "postRollbackReleaseName",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the release to be rolled back",
            "name": "release_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Version number of release to rollback to. 0 represents the previous version",
            "name": "version",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A fernet keystone bearer token used for authentication and authorization",
            "name": "X-Auth-Token",
            "in": "header"
          },
          {
            "type": "string",
            "default": "None",
            "description": "Hostname of the Tiller server",
            "name": "tiller_host",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Port number of the Tiller server. Default is the value of ` + "`" + `CONF.tiller_port` + "`" + `.",
            "name": "tiller_port",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Tiller namespace. Default is the value of ` + "`" + `CONF.tiller_namespace` + "`" + `",
            "name": "tiller_namespace",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Flag to simulate an action if set to True",
            "name": "dry_run",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Specifies whether Tiller should wait until the action is complete before returning.",
            "name": "wait",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 3600,
            "description": "Specifies time in seconds Tiller should wait for the action to complete before timing out.",
            "name": "timeout",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies whether to force resource update through delete/recreate if needed.",
            "name": "force",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies whether to restart pods for the resource if applicable.",
            "name": "recreate_pods",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Response of a rollback of a specified release name",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/rollbackresult"
                }
              ],
              "example": {
                "message": "Rollback of release xyz complete"
              }
            }
          },
          "401": {
            "description": "401 Not authorized"
          },
          "403": {
            "description": "403 Forbidden"
          },
          "500": {
            "description": "500 Internal Server Error"
          }
        }
      }
    },
    "/api/v1.0/status": {
      "get": {
        "description": "Returns the status of Tiller",
        "operationId": "getStatus",
        "parameters": [
          {
            "type": "string",
            "description": "A fernet keystone bearer token used for authentication and authorization",
            "name": "X-Auth-Token",
            "in": "header"
          },
          {
            "type": "string",
            "default": "None",
            "description": "Hostname of the Tiller server",
            "name": "tiller_host",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Port number of the Tiller server. Default is the value of ` + "`" + `CONF.tiller_port` + "`" + `.",
            "name": "tiller_port",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Tiller namespace. Default is the value of ` + "`" + `CONF.tiller_namespace` + "`" + `",
            "name": "tiller_namespace",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Response of Tiller statuses",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/status"
                }
              ],
              "example": {
                "tiller": {
                  "state": true,
                  "version": "0.1.0"
                }
              }
            }
          },
          "401": {
            "description": "401 Not authorized"
          },
          "403": {
            "description": "403 Forbidden"
          },
          "500": {
            "description": "500 Internal Server Error"
          }
        }
      }
    },
    "/api/v1.0/test/{release_name}": {
      "post": {
        "description": "Test specified release name",
        "operationId": "postTestReleaseName",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the release to be tested",
            "name": "release_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "A fernet keystone bearer token used for authentication and authorization",
            "name": "X-Auth-Token",
            "in": "header"
          },
          {
            "type": "string",
            "default": "None",
            "description": "Hostname of the Tiller server",
            "name": "tiller_host",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Port number of the Tiller server. Default is the value of ` + "`" + `CONF.tiller_port` + "`" + `.",
            "name": "tiller_port",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Tiller namespace. Default is the value of ` + "`" + `CONF.tiller_namespace` + "`" + `",
            "name": "tiller_namespace",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Response of a test of a specified release name",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/testresult"
                }
              ],
              "example": {
                "message": "MESSAGE: No test found",
                "result": "FAILED: \u003creason\u003e"
              }
            }
          },
          "401": {
            "description": "401 Not authorized"
          },
          "403": {
            "description": "403 Forbidden"
          },
          "500": {
            "description": "500 Internal Server Error"
          }
        }
      }
    },
    "/api/v1.0/tests": {
      "post": {
        "description": "Test manifest releases",
        "consumes": [
          "application/json",
          "application/x-yaml"
        ],
        "operationId": "postTests",
        "parameters": [
          {
            "type": "string",
            "description": "A fernet keystone bearer token used for authentication and authorization",
            "name": "X-Auth-Token",
            "in": "header"
          },
          {
            "type": "string",
            "default": "None",
            "description": "Hostname of the Tiller server",
            "name": "tiller_host",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Port number of the Tiller server. Default is the value of ` + "`" + `CONF.tiller_port` + "`" + `.",
            "name": "tiller_port",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Tiller namespace. Default is the value of ` + "`" + `CONF.tiller_namespace` + "`" + `",
            "name": "tiller_namespace",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the manifest to target if there are multiples.",
            "name": "target_manifest",
            "in": "query"
          },
          {
            "description": "JSON or YAML representation of the manifest being processed.",
            "name": "request_body",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response of all tests",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/base-response"
                }
              ],
              "example": {
                "apiVersion": "v1.0",
                "code": 400,
                "details": [],
                "kind": "Status",
                "message": "Failed to validate documents or generate Armada Manifest from documents..",
                "metadata": {},
                "reason": "Validation",
                "status": "Failure"
              }
            }
          },
          "400": {
            "description": "400 Bad request"
          },
          "401": {
            "description": "401 Not authorized"
          },
          "403": {
            "description": "403 Forbidden"
          },
          "500": {
            "description": "500 Internal Server Error"
          }
        }
      }
    },
    "/api/v1.0/validatedesign": {
      "post": {
        "description": "Validate a design",
        "consumes": [
          "application/json",
          "application/x-yaml"
        ],
        "operationId": "postValidateDesign",
        "parameters": [
          {
            "type": "string",
            "description": "A fernet keystone bearer token used for authentication and authorization",
            "name": "X-Auth-Token",
            "in": "header"
          },
          {
            "description": "JSON or YAML representation of the manifest being processed.",
            "name": "request_body",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response of a validation check",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/base-response"
                }
              ],
              "example": {
                "apiVersion": "v1.0",
                "code": 200,
                "details": [],
                "kind": "Status",
                "message": "Armada validations succeeded.",
                "metadata": {},
                "reason": "Validation",
                "status": "Success"
              }
            }
          },
          "400": {
            "description": "400 Bad request"
          },
          "401": {
            "description": "401 Not authorized"
          },
          "403": {
            "description": "403 Forbidden"
          }
        }
      }
    },
    "/versions": {
      "get": {
        "description": "Returns list of all supported versions of Armada. Currently this returns a static value.",
        "operationId": "getVersions",
        "responses": {
          "200": {
            "description": "Response of getting Armada versions",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/versions"
                }
              ],
              "example": {
                "v1.0": {
                  "path": "/api/v1.0",
                  "status": "stable"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "applyresult": {
      "type": "object",
      "properties": {
        "message": {
          "type": "object",
          "properties": {
            "diff": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "install": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "upgrade": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "base-response": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "code": {
          "type": "integer"
        },
        "details": {
          "$ref": "#/definitions/detail"
        },
        "kind": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "detail": {
      "type": "object",
      "properties": {
        "errorCount": {
          "type": "integer"
        },
        "messageList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "metadata": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "releases": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "rollbackresult": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "status": {
      "type": "object",
      "properties": {
        "tiller": {
          "type": "object",
          "properties": {
            "state": {
              "type": "boolean"
            },
            "version": {
              "type": "string"
            }
          }
        }
      }
    },
    "testresult": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "result": {
          "type": "string"
        }
      }
    },
    "version": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "versions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/version"
      }
    }
  },
  "parameters": {
    "content-type": {
      "type": "string",
      "name": "Content-Type",
      "in": "header",
      "required": true
    },
    "disable-update-post": {
      "type": "boolean",
      "default": false,
      "name": "disable_update_post",
      "in": "query"
    },
    "disable-update-pre": {
      "type": "boolean",
      "default": false,
      "name": "disable_update_pre",
      "in": "query"
    },
    "dry-run": {
      "type": "boolean",
      "default": false,
      "description": "Flag to simulate an action if set to True",
      "name": "dry_run",
      "in": "query"
    },
    "enable-chart-cleanup": {
      "type": "boolean",
      "default": false,
      "name": "enable_chart_cleanup",
      "in": "query"
    },
    "force": {
      "type": "boolean",
      "default": false,
      "description": "Specifies whether to force resource update through delete/recreate if needed.",
      "name": "force",
      "in": "query"
    },
    "recreate-pods": {
      "type": "boolean",
      "default": false,
      "description": "Specifies whether to restart pods for the resource if applicable.",
      "name": "recreate_pods",
      "in": "query"
    },
    "target-manifest": {
      "type": "string",
      "description": "Specifies the manifest to target if there are multiples.",
      "name": "target_manifest",
      "in": "query"
    },
    "tiller-host": {
      "type": "string",
      "default": "None",
      "description": "Hostname of the Tiller server",
      "name": "tiller_host",
      "in": "query"
    },
    "tiller-namespace": {
      "type": "string",
      "description": "Tiller namespace. Default is the value of ` + "`" + `CONF.tiller_namespace` + "`" + `",
      "name": "tiller_namespace",
      "in": "query"
    },
    "tiller-port": {
      "type": "integer",
      "description": "Port number of the Tiller server. Default is the value of ` + "`" + `CONF.tiller_port` + "`" + `.",
      "name": "tiller_port",
      "in": "query"
    },
    "timeout": {
      "type": "integer",
      "default": 3600,
      "description": "Specifies time in seconds Tiller should wait for the action to complete before timing out.",
      "name": "timeout",
      "in": "query"
    },
    "wait": {
      "type": "boolean",
      "description": "Specifies whether Tiller should wait until the action is complete before returning.",
      "name": "wait",
      "in": "query"
    },
    "x-auth-token": {
      "type": "string",
      "description": "A fernet keystone bearer token used for authentication and authorization",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "responses": {
    "err-bad-request": {
      "description": "400 Bad request"
    },
    "err-forbidden": {
      "description": "403 Forbidden"
    },
    "err-no-auth": {
      "description": "401 Not authorized"
    },
    "err-not-allowed": {
      "description": "405 Method not allowed"
    },
    "err-not-found": {
      "description": "404 Not found"
    },
    "err-server-error": {
      "description": "500 Internal Server Error"
    },
    "err-unsupported-media-type": {
      "description": "415 Unsupported Media Type\n\nMime type needs to be application/json or application/x-yaml.\n"
    },
    "response-get-releases": {
      "description": "Response of all namespaces and releases contained within",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/releases"
          }
        ],
        "example": {
          "namespace-one": [
            "release-A",
            "release-B"
          ],
          "namespace-two": [
            "other-release-X",
            "other-release-Y"
          ]
        }
      }
    },
    "response-get-status": {
      "description": "Response of Tiller statuses",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/status"
          }
        ],
        "example": {
          "tiller": {
            "state": true,
            "version": "0.1.0"
          }
        }
      }
    },
    "response-get-versions": {
      "description": "Response of getting Armada versions",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/versions"
          }
        ],
        "example": {
          "v1.0": {
            "path": "/api/v1.0",
            "status": "stable"
          }
        }
      }
    },
    "response-post-apply": {
      "description": "Response of application of an Armada manifest",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/applyresult"
          }
        ]
      }
    },
    "response-post-rollback-release": {
      "description": "Response of a rollback of a specified release name",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/rollbackresult"
          }
        ],
        "example": {
          "message": "Rollback of release xyz complete"
        }
      }
    },
    "response-post-test-release": {
      "description": "Response of a test of a specified release name",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/testresult"
          }
        ],
        "example": {
          "message": "MESSAGE: No test found",
          "result": "FAILED: \u003creason\u003e"
        }
      }
    },
    "response-post-tests": {
      "description": "Response of all tests",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/base-response"
          }
        ],
        "example": {
          "apiVersion": "v1.0",
          "code": 400,
          "details": [],
          "kind": "Status",
          "message": "Failed to validate documents or generate Armada Manifest from documents..",
          "metadata": {},
          "reason": "Validation",
          "status": "Failure"
        }
      }
    },
    "response-post-validatedesign": {
      "description": "Response of a validation check",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/base-response"
          }
        ],
        "example": {
          "apiVersion": "v1.0",
          "code": 200,
          "details": [],
          "kind": "Status",
          "message": "Armada validations succeeded.",
          "metadata": {},
          "reason": "Validation",
          "status": "Success"
        }
      }
    }
  }
}`))
}
