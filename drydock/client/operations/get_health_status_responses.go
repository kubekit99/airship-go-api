// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetHealthStatusReader is a Reader for the GetHealthStatus structure.
type GetHealthStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHealthStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetHealthStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetHealthStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetHealthStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetHealthStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetHealthStatusOK creates a GetHealthStatusOK with default headers values
func NewGetHealthStatusOK() *GetHealthStatusOK {
	return &GetHealthStatusOK{}
}

/*GetHealthStatusOK handles this case with default header values.

Generic String answer
*/
type GetHealthStatusOK struct {
	Payload string
}

func (o *GetHealthStatusOK) Error() string {
	return fmt.Sprintf("[GET /api/v1.0/health/extended][%d] getHealthStatusOK  %+v", 200, o.Payload)
}

func (o *GetHealthStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHealthStatusUnauthorized creates a GetHealthStatusUnauthorized with default headers values
func NewGetHealthStatusUnauthorized() *GetHealthStatusUnauthorized {
	return &GetHealthStatusUnauthorized{}
}

/*GetHealthStatusUnauthorized handles this case with default header values.

401 Not authorized
*/
type GetHealthStatusUnauthorized struct {
}

func (o *GetHealthStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1.0/health/extended][%d] getHealthStatusUnauthorized ", 401)
}

func (o *GetHealthStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHealthStatusForbidden creates a GetHealthStatusForbidden with default headers values
func NewGetHealthStatusForbidden() *GetHealthStatusForbidden {
	return &GetHealthStatusForbidden{}
}

/*GetHealthStatusForbidden handles this case with default header values.

403 Forbidden
*/
type GetHealthStatusForbidden struct {
}

func (o *GetHealthStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1.0/health/extended][%d] getHealthStatusForbidden ", 403)
}

func (o *GetHealthStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHealthStatusInternalServerError creates a GetHealthStatusInternalServerError with default headers values
func NewGetHealthStatusInternalServerError() *GetHealthStatusInternalServerError {
	return &GetHealthStatusInternalServerError{}
}

/*GetHealthStatusInternalServerError handles this case with default header values.

500 Internal Server Error
*/
type GetHealthStatusInternalServerError struct {
}

func (o *GetHealthStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1.0/health/extended][%d] getHealthStatusInternalServerError ", 500)
}

func (o *GetHealthStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
