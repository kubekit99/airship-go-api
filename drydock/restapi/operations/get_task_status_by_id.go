// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTaskStatusByIDHandlerFunc turns a function with the right signature into a get task status by Id handler
type GetTaskStatusByIDHandlerFunc func(GetTaskStatusByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTaskStatusByIDHandlerFunc) Handle(params GetTaskStatusByIDParams) middleware.Responder {
	return fn(params)
}

// GetTaskStatusByIDHandler interface for that can handle valid get task status by Id params
type GetTaskStatusByIDHandler interface {
	Handle(GetTaskStatusByIDParams) middleware.Responder
}

// NewGetTaskStatusByID creates a new http.Handler for the get task status by Id operation
func NewGetTaskStatusByID(ctx *middleware.Context, handler GetTaskStatusByIDHandler) *GetTaskStatusByID {
	return &GetTaskStatusByID{Context: ctx, Handler: handler}
}

/*GetTaskStatusByID swagger:route GET /api/v1.0/tasks/{task-id} getTaskStatusById

Get task status

*/
type GetTaskStatusByID struct {
	Context *middleware.Context
	Handler GetTaskStatusByIDHandler
}

func (o *GetTaskStatusByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTaskStatusByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
