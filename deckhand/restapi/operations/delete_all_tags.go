// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteAllTagsHandlerFunc turns a function with the right signature into a delete all tags handler
type DeleteAllTagsHandlerFunc func(DeleteAllTagsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteAllTagsHandlerFunc) Handle(params DeleteAllTagsParams) middleware.Responder {
	return fn(params)
}

// DeleteAllTagsHandler interface for that can handle valid delete all tags params
type DeleteAllTagsHandler interface {
	Handle(DeleteAllTagsParams) middleware.Responder
}

// NewDeleteAllTags creates a new http.Handler for the delete all tags operation
func NewDeleteAllTags(ctx *middleware.Context, handler DeleteAllTagsHandler) *DeleteAllTags {
	return &DeleteAllTags{Context: ctx, Handler: handler}
}

/*DeleteAllTags swagger:route DELETE /api/v1.0/revisions/{revision-id}/tags deleteAllTags

Delete all tags for a revision

*/
type DeleteAllTags struct {
	Context *middleware.Context
	Handler DeleteAllTagsHandler
}

func (o *DeleteAllTags) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteAllTagsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
