// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetValidationByIDHandlerFunc turns a function with the right signature into a get validation by Id handler
type GetValidationByIDHandlerFunc func(GetValidationByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetValidationByIDHandlerFunc) Handle(params GetValidationByIDParams) middleware.Responder {
	return fn(params)
}

// GetValidationByIDHandler interface for that can handle valid get validation by Id params
type GetValidationByIDHandler interface {
	Handle(GetValidationByIDParams) middleware.Responder
}

// NewGetValidationByID creates a new http.Handler for the get validation by Id operation
func NewGetValidationByID(ctx *middleware.Context, handler GetValidationByIDHandler) *GetValidationByID {
	return &GetValidationByID{Context: ctx, Handler: handler}
}

/*GetValidationByID swagger:route GET /api/v1.0/revisions/{revision-id}/validations/{validation-name} getValidationById

Gets the full details of a particular validation entry, including all posted error details.

*/
type GetValidationByID struct {
	Context *middleware.Context
	Handler GetValidationByIDHandler
}

func (o *GetValidationByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetValidationByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
