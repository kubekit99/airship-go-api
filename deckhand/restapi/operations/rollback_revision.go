// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RollbackRevisionHandlerFunc turns a function with the right signature into a rollback revision handler
type RollbackRevisionHandlerFunc func(RollbackRevisionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RollbackRevisionHandlerFunc) Handle(params RollbackRevisionParams) middleware.Responder {
	return fn(params)
}

// RollbackRevisionHandler interface for that can handle valid rollback revision params
type RollbackRevisionHandler interface {
	Handle(RollbackRevisionParams) middleware.Responder
}

// NewRollbackRevision creates a new http.Handler for the rollback revision operation
func NewRollbackRevision(ctx *middleware.Context, handler RollbackRevisionHandler) *RollbackRevision {
	return &RollbackRevision{Context: ctx, Handler: handler}
}

/*RollbackRevision swagger:route POST /api/v1.0/rollback/{target-revision-id} rollbackRevision

Roll back a revision to a previous one in the revision history, whereby the target revision s documents are re-created for the new revision.

*/
type RollbackRevision struct {
	Context *middleware.Context
	Handler RollbackRevisionHandler
}

func (o *RollbackRevision) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRollbackRevisionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
