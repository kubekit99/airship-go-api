// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteAllRevisionsHandlerFunc turns a function with the right signature into a delete all revisions handler
type DeleteAllRevisionsHandlerFunc func(DeleteAllRevisionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteAllRevisionsHandlerFunc) Handle(params DeleteAllRevisionsParams) middleware.Responder {
	return fn(params)
}

// DeleteAllRevisionsHandler interface for that can handle valid delete all revisions params
type DeleteAllRevisionsHandler interface {
	Handle(DeleteAllRevisionsParams) middleware.Responder
}

// NewDeleteAllRevisions creates a new http.Handler for the delete all revisions operation
func NewDeleteAllRevisions(ctx *middleware.Context, handler DeleteAllRevisionsHandler) *DeleteAllRevisions {
	return &DeleteAllRevisions{Context: ctx, Handler: handler}
}

/*DeleteAllRevisions swagger:route DELETE /api/v1.0/revisions deleteAllRevisions

Delete all revisions. Warning this is equivalent to purging the database.

*/
type DeleteAllRevisions struct {
	Context *middleware.Context
	Handler DeleteAllRevisionsHandler
}

func (o *DeleteAllRevisions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteAllRevisionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
