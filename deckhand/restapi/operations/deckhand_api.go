// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeckhandAPI creates a new Deckhand instance
func NewDeckhandAPI(spec *loads.Document) *DeckhandAPI {
	return &DeckhandAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		TxtProducer:         runtime.TextProducer(),
		CommitRevisionHandler: CommitRevisionHandlerFunc(func(params CommitRevisionParams) middleware.Responder {
			return middleware.NotImplemented("operation CommitRevision has not yet been implemented")
		}),
		DeleteAllRevisionsHandler: DeleteAllRevisionsHandlerFunc(func(params DeleteAllRevisionsParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteAllRevisions has not yet been implemented")
		}),
		DeleteAllTagsHandler: DeleteAllTagsHandlerFunc(func(params DeleteAllTagsParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteAllTags has not yet been implemented")
		}),
		DeleteRevisionTagByIDHandler: DeleteRevisionTagByIDHandlerFunc(func(params DeleteRevisionTagByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteRevisionTagByID has not yet been implemented")
		}),
		GetAllValidationsHandler: GetAllValidationsHandlerFunc(func(params GetAllValidationsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetAllValidations has not yet been implemented")
		}),
		GetConfigHandler: GetConfigHandlerFunc(func(params GetConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfig has not yet been implemented")
		}),
		GetDocumentsByIDHandler: GetDocumentsByIDHandlerFunc(func(params GetDocumentsByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetDocumentsByID has not yet been implemented")
		}),
		GetRenderedDocumentsByIDHandler: GetRenderedDocumentsByIDHandlerFunc(func(params GetRenderedDocumentsByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetRenderedDocumentsByID has not yet been implemented")
		}),
		GetRevisionByIDHandler: GetRevisionByIDHandlerFunc(func(params GetRevisionByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetRevisionByID has not yet been implemented")
		}),
		GetValidationByIDHandler: GetValidationByIDHandlerFunc(func(params GetValidationByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetValidationByID has not yet been implemented")
		}),
		GetValidationEntryByIDHandler: GetValidationEntryByIDHandlerFunc(func(params GetValidationEntryByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetValidationEntryByID has not yet been implemented")
		}),
		ProbeLivenessHandler: ProbeLivenessHandlerFunc(func(params ProbeLivenessParams) middleware.Responder {
			return middleware.NotImplemented("operation ProbeLiveness has not yet been implemented")
		}),
		ProbeReadinessHandler: ProbeReadinessHandlerFunc(func(params ProbeReadinessParams) middleware.Responder {
			return middleware.NotImplemented("operation ProbeReadiness has not yet been implemented")
		}),
		RollbackRevisionHandler: RollbackRevisionHandlerFunc(func(params RollbackRevisionParams) middleware.Responder {
			return middleware.NotImplemented("operation RollbackRevision has not yet been implemented")
		}),
		ShowRevisionDeepDiffHandler: ShowRevisionDeepDiffHandlerFunc(func(params ShowRevisionDeepDiffParams) middleware.Responder {
			return middleware.NotImplemented("operation ShowRevisionDeepDiff has not yet been implemented")
		}),
		ShowRevisionDiffHandler: ShowRevisionDiffHandlerFunc(func(params ShowRevisionDiffParams) middleware.Responder {
			return middleware.NotImplemented("operation ShowRevisionDiff has not yet been implemented")
		}),
	}
}

/*DeckhandAPI the deckhand API */
type DeckhandAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// TxtProducer registers a producer for a "text/plain" mime type
	TxtProducer runtime.Producer

	// CommitRevisionHandler sets the operation handler for the commit revision operation
	CommitRevisionHandler CommitRevisionHandler
	// DeleteAllRevisionsHandler sets the operation handler for the delete all revisions operation
	DeleteAllRevisionsHandler DeleteAllRevisionsHandler
	// DeleteAllTagsHandler sets the operation handler for the delete all tags operation
	DeleteAllTagsHandler DeleteAllTagsHandler
	// DeleteRevisionTagByIDHandler sets the operation handler for the delete revision tag by Id operation
	DeleteRevisionTagByIDHandler DeleteRevisionTagByIDHandler
	// GetAllValidationsHandler sets the operation handler for the get all validations operation
	GetAllValidationsHandler GetAllValidationsHandler
	// GetConfigHandler sets the operation handler for the get config operation
	GetConfigHandler GetConfigHandler
	// GetDocumentsByIDHandler sets the operation handler for the get documents by Id operation
	GetDocumentsByIDHandler GetDocumentsByIDHandler
	// GetRenderedDocumentsByIDHandler sets the operation handler for the get rendered documents by Id operation
	GetRenderedDocumentsByIDHandler GetRenderedDocumentsByIDHandler
	// GetRevisionByIDHandler sets the operation handler for the get revision by Id operation
	GetRevisionByIDHandler GetRevisionByIDHandler
	// GetValidationByIDHandler sets the operation handler for the get validation by Id operation
	GetValidationByIDHandler GetValidationByIDHandler
	// GetValidationEntryByIDHandler sets the operation handler for the get validation entry by Id operation
	GetValidationEntryByIDHandler GetValidationEntryByIDHandler
	// ProbeLivenessHandler sets the operation handler for the probe liveness operation
	ProbeLivenessHandler ProbeLivenessHandler
	// ProbeReadinessHandler sets the operation handler for the probe readiness operation
	ProbeReadinessHandler ProbeReadinessHandler
	// RollbackRevisionHandler sets the operation handler for the rollback revision operation
	RollbackRevisionHandler RollbackRevisionHandler
	// ShowRevisionDeepDiffHandler sets the operation handler for the show revision deep diff operation
	ShowRevisionDeepDiffHandler ShowRevisionDeepDiffHandler
	// ShowRevisionDiffHandler sets the operation handler for the show revision diff operation
	ShowRevisionDiffHandler ShowRevisionDiffHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *DeckhandAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DeckhandAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DeckhandAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DeckhandAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DeckhandAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DeckhandAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DeckhandAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DeckhandAPI
func (o *DeckhandAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.CommitRevisionHandler == nil {
		unregistered = append(unregistered, "CommitRevisionHandler")
	}

	if o.DeleteAllRevisionsHandler == nil {
		unregistered = append(unregistered, "DeleteAllRevisionsHandler")
	}

	if o.DeleteAllTagsHandler == nil {
		unregistered = append(unregistered, "DeleteAllTagsHandler")
	}

	if o.DeleteRevisionTagByIDHandler == nil {
		unregistered = append(unregistered, "DeleteRevisionTagByIDHandler")
	}

	if o.GetAllValidationsHandler == nil {
		unregistered = append(unregistered, "GetAllValidationsHandler")
	}

	if o.GetConfigHandler == nil {
		unregistered = append(unregistered, "GetConfigHandler")
	}

	if o.GetDocumentsByIDHandler == nil {
		unregistered = append(unregistered, "GetDocumentsByIDHandler")
	}

	if o.GetRenderedDocumentsByIDHandler == nil {
		unregistered = append(unregistered, "GetRenderedDocumentsByIDHandler")
	}

	if o.GetRevisionByIDHandler == nil {
		unregistered = append(unregistered, "GetRevisionByIDHandler")
	}

	if o.GetValidationByIDHandler == nil {
		unregistered = append(unregistered, "GetValidationByIDHandler")
	}

	if o.GetValidationEntryByIDHandler == nil {
		unregistered = append(unregistered, "GetValidationEntryByIDHandler")
	}

	if o.ProbeLivenessHandler == nil {
		unregistered = append(unregistered, "ProbeLivenessHandler")
	}

	if o.ProbeReadinessHandler == nil {
		unregistered = append(unregistered, "ProbeReadinessHandler")
	}

	if o.RollbackRevisionHandler == nil {
		unregistered = append(unregistered, "RollbackRevisionHandler")
	}

	if o.ShowRevisionDeepDiffHandler == nil {
		unregistered = append(unregistered, "ShowRevisionDeepDiffHandler")
	}

	if o.ShowRevisionDiffHandler == nil {
		unregistered = append(unregistered, "ShowRevisionDiffHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DeckhandAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DeckhandAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *DeckhandAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *DeckhandAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *DeckhandAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "text/plain":
			result["text/plain"] = o.TxtProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DeckhandAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the deckhand API
func (o *DeckhandAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DeckhandAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1.0/buckets/{bucket-name}/documents"] = NewCommitRevision(o.context, o.CommitRevisionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1.0/revisions"] = NewDeleteAllRevisions(o.context, o.DeleteAllRevisionsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1.0/revisions/{revision-id}/tags"] = NewDeleteAllTags(o.context, o.DeleteAllTagsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1.0/revisions/{revision-id}/tags/{tag}"] = NewDeleteRevisionTagByID(o.context, o.DeleteRevisionTagByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/revisions/{revision-id}/validations"] = NewGetAllValidations(o.context, o.GetAllValidationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config"] = NewGetConfig(o.context, o.GetConfigHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/revisions/{revision-id}/documents"] = NewGetDocumentsByID(o.context, o.GetDocumentsByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/revisions/{revision-id}/rendered-documents"] = NewGetRenderedDocumentsByID(o.context, o.GetRenderedDocumentsByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/revisions/{revision-id}"] = NewGetRevisionByID(o.context, o.GetRevisionByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/revisions/{revision-id}/validations/{validation-name}"] = NewGetValidationByID(o.context, o.GetValidationByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/revisions/{revision-id}/validations/{validation-name}/entries/{entry-id}"] = NewGetValidationEntryByID(o.context, o.GetValidationEntryByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/liveness"] = NewProbeLiveness(o.context, o.ProbeLivenessHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/readiness"] = NewProbeReadiness(o.context, o.ProbeReadinessHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1.0/rollback/{target-revision-id}"] = NewRollbackRevision(o.context, o.RollbackRevisionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/revisions/{revision-id}/deepdiff/{comparison-revision-id}"] = NewShowRevisionDeepDiff(o.context, o.ShowRevisionDeepDiffHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/revisions/{revision-id}/diff/{comparison-revision-id}"] = NewShowRevisionDiff(o.context, o.ShowRevisionDiffHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DeckhandAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DeckhandAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DeckhandAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DeckhandAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
