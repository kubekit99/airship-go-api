// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// CommitRevisionReader is a Reader for the CommitRevision structure.
type CommitRevisionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommitRevisionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCommitRevisionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCommitRevisionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCommitRevisionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCommitRevisionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCommitRevisionOK creates a CommitRevisionOK with default headers values
func NewCommitRevisionOK() *CommitRevisionOK {
	return &CommitRevisionOK{}
}

/*CommitRevisionOK handles this case with default header values.

Generic String answer
*/
type CommitRevisionOK struct {
	Payload string
}

func (o *CommitRevisionOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1.0/buckets/{bucket-name}/documents][%d] commitRevisionOK  %+v", 200, o.Payload)
}

func (o *CommitRevisionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitRevisionUnauthorized creates a CommitRevisionUnauthorized with default headers values
func NewCommitRevisionUnauthorized() *CommitRevisionUnauthorized {
	return &CommitRevisionUnauthorized{}
}

/*CommitRevisionUnauthorized handles this case with default header values.

401 Not authorized
*/
type CommitRevisionUnauthorized struct {
}

func (o *CommitRevisionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1.0/buckets/{bucket-name}/documents][%d] commitRevisionUnauthorized ", 401)
}

func (o *CommitRevisionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCommitRevisionForbidden creates a CommitRevisionForbidden with default headers values
func NewCommitRevisionForbidden() *CommitRevisionForbidden {
	return &CommitRevisionForbidden{}
}

/*CommitRevisionForbidden handles this case with default header values.

403 Forbidden
*/
type CommitRevisionForbidden struct {
}

func (o *CommitRevisionForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1.0/buckets/{bucket-name}/documents][%d] commitRevisionForbidden ", 403)
}

func (o *CommitRevisionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCommitRevisionInternalServerError creates a CommitRevisionInternalServerError with default headers values
func NewCommitRevisionInternalServerError() *CommitRevisionInternalServerError {
	return &CommitRevisionInternalServerError{}
}

/*CommitRevisionInternalServerError handles this case with default header values.

500 Internal Server Error
*/
type CommitRevisionInternalServerError struct {
}

func (o *CommitRevisionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1.0/buckets/{bucket-name}/documents][%d] commitRevisionInternalServerError ", 500)
}

func (o *CommitRevisionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
