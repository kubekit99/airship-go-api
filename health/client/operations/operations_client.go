// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetConfig get config API
*/
func (a *Client) GetConfig(params *GetConfigParams) (*GetConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfig",
		Method:             "GET",
		PathPattern:        "/config",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConfigOK), nil

}

/*
GetGreeting get greeting API
*/
func (a *Client) GetGreeting(params *GetGreetingParams) (*GetGreetingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGreetingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGreeting",
		Method:             "GET",
		PathPattern:        "/hello",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGreetingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGreetingOK), nil

}

/*
ProbeLiveness probe liveness API
*/
func (a *Client) ProbeLiveness(params *ProbeLivenessParams) (*ProbeLivenessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProbeLivenessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "probeLiveness",
		Method:             "GET",
		PathPattern:        "/liveness",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProbeLivenessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProbeLivenessOK), nil

}

/*
ProbeReadiness probe readiness API
*/
func (a *Client) ProbeReadiness(params *ProbeReadinessParams) (*ProbeReadinessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProbeReadinessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "probeReadiness",
		Method:             "GET",
		PathPattern:        "/readiness",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProbeReadinessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProbeReadinessOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
