// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RetrieveRenderedCleartextConfigDocsHandlerFunc turns a function with the right signature into a retrieve rendered cleartext config docs handler
type RetrieveRenderedCleartextConfigDocsHandlerFunc func(RetrieveRenderedCleartextConfigDocsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveRenderedCleartextConfigDocsHandlerFunc) Handle(params RetrieveRenderedCleartextConfigDocsParams) middleware.Responder {
	return fn(params)
}

// RetrieveRenderedCleartextConfigDocsHandler interface for that can handle valid retrieve rendered cleartext config docs params
type RetrieveRenderedCleartextConfigDocsHandler interface {
	Handle(RetrieveRenderedCleartextConfigDocsParams) middleware.Responder
}

// NewRetrieveRenderedCleartextConfigDocs creates a new http.Handler for the retrieve rendered cleartext config docs operation
func NewRetrieveRenderedCleartextConfigDocs(ctx *middleware.Context, handler RetrieveRenderedCleartextConfigDocsHandler) *RetrieveRenderedCleartextConfigDocs {
	return &RetrieveRenderedCleartextConfigDocs{Context: ctx, Handler: handler}
}

/*RetrieveRenderedCleartextConfigDocs swagger:route GET /api/v1.0/renderedconfigdocs retrieveRenderedCleartextConfigDocs

Retrieve the configuration documents with cleartext secrets rendered by Deckhand into a complete design

*/
type RetrieveRenderedCleartextConfigDocs struct {
	Context *middleware.Context
	Handler RetrieveRenderedCleartextConfigDocsHandler
}

func (o *RetrieveRenderedCleartextConfigDocs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveRenderedCleartextConfigDocsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
