// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewShipyardAPI creates a new Shipyard instance
func NewShipyardAPI(spec *loads.Document) *ShipyardAPI {
	return &ShipyardAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		TxtProducer:         runtime.TextProducer(),
		CommitConfigDocsHandler: CommitConfigDocsHandlerFunc(func(params CommitConfigDocsParams) middleware.Responder {
			return middleware.NotImplemented("operation CommitConfigDocs has not yet been implemented")
		}),
		GetConfigHandler: GetConfigHandlerFunc(func(params GetConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfig has not yet been implemented")
		}),
		GetHealthHandler: GetHealthHandlerFunc(func(params GetHealthParams) middleware.Responder {
			return middleware.NotImplemented("operation GetHealth has not yet been implemented")
		}),
		GetNoteDetailsHandler: GetNoteDetailsHandlerFunc(func(params GetNoteDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetNoteDetails has not yet been implemented")
		}),
		GetSiteStatusesHandler: GetSiteStatusesHandlerFunc(func(params GetSiteStatusesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSiteStatuses has not yet been implemented")
		}),
		GetVersionsHandler: GetVersionsHandlerFunc(func(params GetVersionsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetVersions has not yet been implemented")
		}),
		GetWFActionByIDHandler: GetWFActionByIDHandlerFunc(func(params GetWFActionByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetWFActionByID has not yet been implemented")
		}),
		GetWFActionStepByIDHandler: GetWFActionStepByIDHandlerFunc(func(params GetWFActionStepByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetWFActionStepByID has not yet been implemented")
		}),
		GetWFActionStepLogsByIDHandler: GetWFActionStepLogsByIDHandlerFunc(func(params GetWFActionStepLogsByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetWFActionStepLogsByID has not yet been implemented")
		}),
		GetWFActionValidationByIDHandler: GetWFActionValidationByIDHandlerFunc(func(params GetWFActionValidationByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetWFActionValidationByID has not yet been implemented")
		}),
		GetWorkflowByIDHandler: GetWorkflowByIDHandlerFunc(func(params GetWorkflowByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetWorkflowByID has not yet been implemented")
		}),
		GetWorkflowsHandler: GetWorkflowsHandlerFunc(func(params GetWorkflowsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetWorkflows has not yet been implemented")
		}),
		InvokeHelmTestsHandler: InvokeHelmTestsHandlerFunc(func(params InvokeHelmTestsParams) middleware.Responder {
			return middleware.NotImplemented("operation InvokeHelmTests has not yet been implemented")
		}),
		ProbeLivenessHandler: ProbeLivenessHandlerFunc(func(params ProbeLivenessParams) middleware.Responder {
			return middleware.NotImplemented("operation ProbeLiveness has not yet been implemented")
		}),
		ProbeReadinessHandler: ProbeReadinessHandlerFunc(func(params ProbeReadinessParams) middleware.Responder {
			return middleware.NotImplemented("operation ProbeReadiness has not yet been implemented")
		}),
		RetrieveConfigDocsClearTextByCollectionIDHandler: RetrieveConfigDocsClearTextByCollectionIDHandlerFunc(func(params RetrieveConfigDocsClearTextByCollectionIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RetrieveConfigDocsClearTextByCollectionID has not yet been implemented")
		}),
		RetrieveConfigDocsStatusHandler: RetrieveConfigDocsStatusHandlerFunc(func(params RetrieveConfigDocsStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation RetrieveConfigDocsStatus has not yet been implemented")
		}),
		RetrieveRenderedCleartextConfigDocsHandler: RetrieveRenderedCleartextConfigDocsHandlerFunc(func(params RetrieveRenderedCleartextConfigDocsParams) middleware.Responder {
			return middleware.NotImplemented("operation RetrieveRenderedCleartextConfigDocs has not yet been implemented")
		}),
		SendControlToWFActionHandler: SendControlToWFActionHandlerFunc(func(params SendControlToWFActionParams) middleware.Responder {
			return middleware.NotImplemented("operation SendControlToWFAction has not yet been implemented")
		}),
	}
}

/*ShipyardAPI Shipyard provides operators a way to deploy or upgrade collection of helm
charts using a single command.
*/
type ShipyardAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// TxtProducer registers a producer for a "text/plain" mime type
	TxtProducer runtime.Producer

	// CommitConfigDocsHandler sets the operation handler for the commit config docs operation
	CommitConfigDocsHandler CommitConfigDocsHandler
	// GetConfigHandler sets the operation handler for the get config operation
	GetConfigHandler GetConfigHandler
	// GetHealthHandler sets the operation handler for the get health operation
	GetHealthHandler GetHealthHandler
	// GetNoteDetailsHandler sets the operation handler for the get note details operation
	GetNoteDetailsHandler GetNoteDetailsHandler
	// GetSiteStatusesHandler sets the operation handler for the get site statuses operation
	GetSiteStatusesHandler GetSiteStatusesHandler
	// GetVersionsHandler sets the operation handler for the get versions operation
	GetVersionsHandler GetVersionsHandler
	// GetWFActionByIDHandler sets the operation handler for the get w f action by Id operation
	GetWFActionByIDHandler GetWFActionByIDHandler
	// GetWFActionStepByIDHandler sets the operation handler for the get w f action step by Id operation
	GetWFActionStepByIDHandler GetWFActionStepByIDHandler
	// GetWFActionStepLogsByIDHandler sets the operation handler for the get w f action step logs by Id operation
	GetWFActionStepLogsByIDHandler GetWFActionStepLogsByIDHandler
	// GetWFActionValidationByIDHandler sets the operation handler for the get w f action validation by Id operation
	GetWFActionValidationByIDHandler GetWFActionValidationByIDHandler
	// GetWorkflowByIDHandler sets the operation handler for the get workflow by Id operation
	GetWorkflowByIDHandler GetWorkflowByIDHandler
	// GetWorkflowsHandler sets the operation handler for the get workflows operation
	GetWorkflowsHandler GetWorkflowsHandler
	// InvokeHelmTestsHandler sets the operation handler for the invoke helm tests operation
	InvokeHelmTestsHandler InvokeHelmTestsHandler
	// ProbeLivenessHandler sets the operation handler for the probe liveness operation
	ProbeLivenessHandler ProbeLivenessHandler
	// ProbeReadinessHandler sets the operation handler for the probe readiness operation
	ProbeReadinessHandler ProbeReadinessHandler
	// RetrieveConfigDocsClearTextByCollectionIDHandler sets the operation handler for the retrieve config docs clear text by collection Id operation
	RetrieveConfigDocsClearTextByCollectionIDHandler RetrieveConfigDocsClearTextByCollectionIDHandler
	// RetrieveConfigDocsStatusHandler sets the operation handler for the retrieve config docs status operation
	RetrieveConfigDocsStatusHandler RetrieveConfigDocsStatusHandler
	// RetrieveRenderedCleartextConfigDocsHandler sets the operation handler for the retrieve rendered cleartext config docs operation
	RetrieveRenderedCleartextConfigDocsHandler RetrieveRenderedCleartextConfigDocsHandler
	// SendControlToWFActionHandler sets the operation handler for the send control to w f action operation
	SendControlToWFActionHandler SendControlToWFActionHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *ShipyardAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ShipyardAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ShipyardAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ShipyardAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ShipyardAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ShipyardAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ShipyardAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ShipyardAPI
func (o *ShipyardAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.CommitConfigDocsHandler == nil {
		unregistered = append(unregistered, "CommitConfigDocsHandler")
	}

	if o.GetConfigHandler == nil {
		unregistered = append(unregistered, "GetConfigHandler")
	}

	if o.GetHealthHandler == nil {
		unregistered = append(unregistered, "GetHealthHandler")
	}

	if o.GetNoteDetailsHandler == nil {
		unregistered = append(unregistered, "GetNoteDetailsHandler")
	}

	if o.GetSiteStatusesHandler == nil {
		unregistered = append(unregistered, "GetSiteStatusesHandler")
	}

	if o.GetVersionsHandler == nil {
		unregistered = append(unregistered, "GetVersionsHandler")
	}

	if o.GetWFActionByIDHandler == nil {
		unregistered = append(unregistered, "GetWFActionByIDHandler")
	}

	if o.GetWFActionStepByIDHandler == nil {
		unregistered = append(unregistered, "GetWFActionStepByIDHandler")
	}

	if o.GetWFActionStepLogsByIDHandler == nil {
		unregistered = append(unregistered, "GetWFActionStepLogsByIDHandler")
	}

	if o.GetWFActionValidationByIDHandler == nil {
		unregistered = append(unregistered, "GetWFActionValidationByIDHandler")
	}

	if o.GetWorkflowByIDHandler == nil {
		unregistered = append(unregistered, "GetWorkflowByIDHandler")
	}

	if o.GetWorkflowsHandler == nil {
		unregistered = append(unregistered, "GetWorkflowsHandler")
	}

	if o.InvokeHelmTestsHandler == nil {
		unregistered = append(unregistered, "InvokeHelmTestsHandler")
	}

	if o.ProbeLivenessHandler == nil {
		unregistered = append(unregistered, "ProbeLivenessHandler")
	}

	if o.ProbeReadinessHandler == nil {
		unregistered = append(unregistered, "ProbeReadinessHandler")
	}

	if o.RetrieveConfigDocsClearTextByCollectionIDHandler == nil {
		unregistered = append(unregistered, "RetrieveConfigDocsClearTextByCollectionIDHandler")
	}

	if o.RetrieveConfigDocsStatusHandler == nil {
		unregistered = append(unregistered, "RetrieveConfigDocsStatusHandler")
	}

	if o.RetrieveRenderedCleartextConfigDocsHandler == nil {
		unregistered = append(unregistered, "RetrieveRenderedCleartextConfigDocsHandler")
	}

	if o.SendControlToWFActionHandler == nil {
		unregistered = append(unregistered, "SendControlToWFActionHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ShipyardAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ShipyardAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *ShipyardAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *ShipyardAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *ShipyardAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "text/plain":
			result["text/plain"] = o.TxtProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ShipyardAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the shipyard API
func (o *ShipyardAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ShipyardAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1.0/commitconfigdocs"] = NewCommitConfigDocs(o.context, o.CommitConfigDocsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config"] = NewGetConfig(o.context, o.GetConfigHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/health"] = NewGetHealth(o.context, o.GetHealthHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/notedetails/{note-id}"] = NewGetNoteDetails(o.context, o.GetNoteDetailsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/site_statuses"] = NewGetSiteStatuses(o.context, o.GetSiteStatusesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/versions"] = NewGetVersions(o.context, o.GetVersionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/actions/{action-id}"] = NewGetWFActionByID(o.context, o.GetWFActionByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/actions/{action-id}/steps/{step-id}"] = NewGetWFActionStepByID(o.context, o.GetWFActionStepByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/actions/{action-id}/steps/{step-id}/logs"] = NewGetWFActionStepLogsByID(o.context, o.GetWFActionStepLogsByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/actions/{action-id}/validations/{validation-id}"] = NewGetWFActionValidationByID(o.context, o.GetWFActionValidationByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/workflows/{workflow-id}"] = NewGetWorkflowByID(o.context, o.GetWorkflowByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/workflows"] = NewGetWorkflows(o.context, o.GetWorkflowsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1.0/actions"] = NewInvokeHelmTests(o.context, o.InvokeHelmTestsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/liveness"] = NewProbeLiveness(o.context, o.ProbeLivenessHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/readiness"] = NewProbeReadiness(o.context, o.ProbeReadinessHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/configdocs/{collection-id}"] = NewRetrieveConfigDocsClearTextByCollectionID(o.context, o.RetrieveConfigDocsClearTextByCollectionIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/configdocs"] = NewRetrieveConfigDocsStatus(o.context, o.RetrieveConfigDocsStatusHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1.0/renderedconfigdocs"] = NewRetrieveRenderedCleartextConfigDocs(o.context, o.RetrieveRenderedCleartextConfigDocsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1.0/actions/{action-id}/control/{control-verb}"] = NewSendControlToWFAction(o.context, o.SendControlToWFActionHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ShipyardAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ShipyardAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ShipyardAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ShipyardAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
