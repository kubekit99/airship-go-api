// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// InvokeHelmTestsHandlerFunc turns a function with the right signature into a invoke helm tests handler
type InvokeHelmTestsHandlerFunc func(InvokeHelmTestsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn InvokeHelmTestsHandlerFunc) Handle(params InvokeHelmTestsParams) middleware.Responder {
	return fn(params)
}

// InvokeHelmTestsHandler interface for that can handle valid invoke helm tests params
type InvokeHelmTestsHandler interface {
	Handle(InvokeHelmTestsParams) middleware.Responder
}

// NewInvokeHelmTests creates a new http.Handler for the invoke helm tests operation
func NewInvokeHelmTests(ctx *middleware.Context, handler InvokeHelmTestsHandler) *InvokeHelmTests {
	return &InvokeHelmTests{Context: ctx, Handler: handler}
}

/*InvokeHelmTests swagger:route POST /api/v1.0/actions invokeHelmTests

Create a workflow action to invoke Helm tests on all releases or a targeted release

*/
type InvokeHelmTests struct {
	Context *middleware.Context
	Handler InvokeHelmTestsHandler
}

func (o *InvokeHelmTests) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewInvokeHelmTestsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
