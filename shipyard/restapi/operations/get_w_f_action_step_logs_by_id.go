// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetWFActionStepLogsByIDHandlerFunc turns a function with the right signature into a get w f action step logs by Id handler
type GetWFActionStepLogsByIDHandlerFunc func(GetWFActionStepLogsByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWFActionStepLogsByIDHandlerFunc) Handle(params GetWFActionStepLogsByIDParams) middleware.Responder {
	return fn(params)
}

// GetWFActionStepLogsByIDHandler interface for that can handle valid get w f action step logs by Id params
type GetWFActionStepLogsByIDHandler interface {
	Handle(GetWFActionStepLogsByIDParams) middleware.Responder
}

// NewGetWFActionStepLogsByID creates a new http.Handler for the get w f action step logs by Id operation
func NewGetWFActionStepLogsByID(ctx *middleware.Context, handler GetWFActionStepLogsByIDHandler) *GetWFActionStepLogsByID {
	return &GetWFActionStepLogsByID{Context: ctx, Handler: handler}
}

/*GetWFActionStepLogsByID swagger:route GET /api/v1.0/actions/{action-id}/steps/{step-id}/logs getWFActionStepLogsById

Retrieve logs of an action step by its id

*/
type GetWFActionStepLogsByID struct {
	Context *middleware.Context
	Handler GetWFActionStepLogsByIDHandler
}

func (o *GetWFActionStepLogsByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetWFActionStepLogsByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
