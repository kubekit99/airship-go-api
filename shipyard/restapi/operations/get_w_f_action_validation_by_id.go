// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetWFActionValidationByIDHandlerFunc turns a function with the right signature into a get w f action validation by Id handler
type GetWFActionValidationByIDHandlerFunc func(GetWFActionValidationByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWFActionValidationByIDHandlerFunc) Handle(params GetWFActionValidationByIDParams) middleware.Responder {
	return fn(params)
}

// GetWFActionValidationByIDHandler interface for that can handle valid get w f action validation by Id params
type GetWFActionValidationByIDHandler interface {
	Handle(GetWFActionValidationByIDParams) middleware.Responder
}

// NewGetWFActionValidationByID creates a new http.Handler for the get w f action validation by Id operation
func NewGetWFActionValidationByID(ctx *middleware.Context, handler GetWFActionValidationByIDHandler) *GetWFActionValidationByID {
	return &GetWFActionValidationByID{Context: ctx, Handler: handler}
}

/*GetWFActionValidationByID swagger:route GET /api/v1.0/actions/{action-id}/validations/{validation-id} getWFActionValidationById

Retrieve an action validation by its id

*/
type GetWFActionValidationByID struct {
	Context *middleware.Context
	Handler GetWFActionValidationByIDHandler
}

func (o *GetWFActionValidationByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetWFActionValidationByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
