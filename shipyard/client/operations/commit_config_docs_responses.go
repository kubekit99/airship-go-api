// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// CommitConfigDocsReader is a Reader for the CommitConfigDocs structure.
type CommitConfigDocsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommitConfigDocsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCommitConfigDocsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCommitConfigDocsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCommitConfigDocsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCommitConfigDocsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCommitConfigDocsOK creates a CommitConfigDocsOK with default headers values
func NewCommitConfigDocsOK() *CommitConfigDocsOK {
	return &CommitConfigDocsOK{}
}

/*CommitConfigDocsOK handles this case with default header values.

Generic String answer
*/
type CommitConfigDocsOK struct {
	Payload string
}

func (o *CommitConfigDocsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/commitconfigdocs][%d] commitConfigDocsOK  %+v", 200, o.Payload)
}

func (o *CommitConfigDocsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitConfigDocsUnauthorized creates a CommitConfigDocsUnauthorized with default headers values
func NewCommitConfigDocsUnauthorized() *CommitConfigDocsUnauthorized {
	return &CommitConfigDocsUnauthorized{}
}

/*CommitConfigDocsUnauthorized handles this case with default header values.

401 Not authorized
*/
type CommitConfigDocsUnauthorized struct {
}

func (o *CommitConfigDocsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/commitconfigdocs][%d] commitConfigDocsUnauthorized ", 401)
}

func (o *CommitConfigDocsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCommitConfigDocsForbidden creates a CommitConfigDocsForbidden with default headers values
func NewCommitConfigDocsForbidden() *CommitConfigDocsForbidden {
	return &CommitConfigDocsForbidden{}
}

/*CommitConfigDocsForbidden handles this case with default header values.

403 Forbidden
*/
type CommitConfigDocsForbidden struct {
}

func (o *CommitConfigDocsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/commitconfigdocs][%d] commitConfigDocsForbidden ", 403)
}

func (o *CommitConfigDocsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCommitConfigDocsInternalServerError creates a CommitConfigDocsInternalServerError with default headers values
func NewCommitConfigDocsInternalServerError() *CommitConfigDocsInternalServerError {
	return &CommitConfigDocsInternalServerError{}
}

/*CommitConfigDocsInternalServerError handles this case with default header values.

500 Internal Server Error
*/
type CommitConfigDocsInternalServerError struct {
}

func (o *CommitConfigDocsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1.0/commitconfigdocs][%d] commitConfigDocsInternalServerError ", 500)
}

func (o *CommitConfigDocsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
