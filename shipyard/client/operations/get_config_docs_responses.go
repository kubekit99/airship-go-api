// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetConfigDocsReader is a Reader for the GetConfigDocs structure.
type GetConfigDocsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConfigDocsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetConfigDocsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetConfigDocsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetConfigDocsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetConfigDocsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetConfigDocsOK creates a GetConfigDocsOK with default headers values
func NewGetConfigDocsOK() *GetConfigDocsOK {
	return &GetConfigDocsOK{}
}

/*GetConfigDocsOK handles this case with default header values.

Generic String answer
*/
type GetConfigDocsOK struct {
	Payload string
}

func (o *GetConfigDocsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1.0/configdocs][%d] getConfigDocsOK  %+v", 200, o.Payload)
}

func (o *GetConfigDocsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConfigDocsUnauthorized creates a GetConfigDocsUnauthorized with default headers values
func NewGetConfigDocsUnauthorized() *GetConfigDocsUnauthorized {
	return &GetConfigDocsUnauthorized{}
}

/*GetConfigDocsUnauthorized handles this case with default header values.

401 Not authorized
*/
type GetConfigDocsUnauthorized struct {
}

func (o *GetConfigDocsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1.0/configdocs][%d] getConfigDocsUnauthorized ", 401)
}

func (o *GetConfigDocsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConfigDocsForbidden creates a GetConfigDocsForbidden with default headers values
func NewGetConfigDocsForbidden() *GetConfigDocsForbidden {
	return &GetConfigDocsForbidden{}
}

/*GetConfigDocsForbidden handles this case with default header values.

403 Forbidden
*/
type GetConfigDocsForbidden struct {
}

func (o *GetConfigDocsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1.0/configdocs][%d] getConfigDocsForbidden ", 403)
}

func (o *GetConfigDocsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConfigDocsInternalServerError creates a GetConfigDocsInternalServerError with default headers values
func NewGetConfigDocsInternalServerError() *GetConfigDocsInternalServerError {
	return &GetConfigDocsInternalServerError{}
}

/*GetConfigDocsInternalServerError handles this case with default header values.

500 Internal Server Error
*/
type GetConfigDocsInternalServerError struct {
}

func (o *GetConfigDocsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1.0/configdocs][%d] getConfigDocsInternalServerError ", 500)
}

func (o *GetConfigDocsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
