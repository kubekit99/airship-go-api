// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetWFActionByIDReader is a Reader for the GetWFActionByID structure.
type GetWFActionByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWFActionByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetWFActionByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetWFActionByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetWFActionByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetWFActionByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetWFActionByIDOK creates a GetWFActionByIDOK with default headers values
func NewGetWFActionByIDOK() *GetWFActionByIDOK {
	return &GetWFActionByIDOK{}
}

/*GetWFActionByIDOK handles this case with default header values.

Generic String answer
*/
type GetWFActionByIDOK struct {
	Payload string
}

func (o *GetWFActionByIDOK) Error() string {
	return fmt.Sprintf("[GET /api/v1.0/actions/{action-id}][%d] getWFActionByIdOK  %+v", 200, o.Payload)
}

func (o *GetWFActionByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWFActionByIDUnauthorized creates a GetWFActionByIDUnauthorized with default headers values
func NewGetWFActionByIDUnauthorized() *GetWFActionByIDUnauthorized {
	return &GetWFActionByIDUnauthorized{}
}

/*GetWFActionByIDUnauthorized handles this case with default header values.

401 Not authorized
*/
type GetWFActionByIDUnauthorized struct {
}

func (o *GetWFActionByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1.0/actions/{action-id}][%d] getWFActionByIdUnauthorized ", 401)
}

func (o *GetWFActionByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWFActionByIDForbidden creates a GetWFActionByIDForbidden with default headers values
func NewGetWFActionByIDForbidden() *GetWFActionByIDForbidden {
	return &GetWFActionByIDForbidden{}
}

/*GetWFActionByIDForbidden handles this case with default header values.

403 Forbidden
*/
type GetWFActionByIDForbidden struct {
}

func (o *GetWFActionByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1.0/actions/{action-id}][%d] getWFActionByIdForbidden ", 403)
}

func (o *GetWFActionByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWFActionByIDInternalServerError creates a GetWFActionByIDInternalServerError with default headers values
func NewGetWFActionByIDInternalServerError() *GetWFActionByIDInternalServerError {
	return &GetWFActionByIDInternalServerError{}
}

/*GetWFActionByIDInternalServerError handles this case with default header values.

500 Internal Server Error
*/
type GetWFActionByIDInternalServerError struct {
}

func (o *GetWFActionByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1.0/actions/{action-id}][%d] getWFActionByIdInternalServerError ", 500)
}

func (o *GetWFActionByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
