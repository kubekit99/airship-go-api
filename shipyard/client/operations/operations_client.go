// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CommitConfigDocs Move documents from the Shipyard buffer to the committed documents
*/
func (a *Client) CommitConfigDocs(params *CommitConfigDocsParams) (*CommitConfigDocsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitConfigDocsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "commitConfigDocs",
		Method:             "POST",
		PathPattern:        "/api/v1.0/commitconfigdocs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitConfigDocsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CommitConfigDocsOK), nil

}

/*
GetConfig get config API
*/
func (a *Client) GetConfig(params *GetConfigParams) (*GetConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfig",
		Method:             "GET",
		PathPattern:        "/config",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConfigOK), nil

}

/*
GetHealth Returns the '/health'
*/
func (a *Client) GetHealth(params *GetHealthParams) (*GetHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHealth",
		Method:             "GET",
		PathPattern:        "/api/v1.0/health",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHealthOK), nil

}

/*
GetNoteDetails Retrieve the details for a note. Further authorization is required depending on the topic of the note
*/
func (a *Client) GetNoteDetails(params *GetNoteDetailsParams) (*GetNoteDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNoteDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNoteDetails",
		Method:             "GET",
		PathPattern:        "/api/v1.0/notedetails/{note-id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNoteDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNoteDetailsOK), nil

}

/*
GetSiteStatuses Retrieve the statuses for the site
*/
func (a *Client) GetSiteStatuses(params *GetSiteStatusesParams) (*GetSiteStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSiteStatuses",
		Method:             "GET",
		PathPattern:        "/api/v1.0/site_statuses",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSiteStatusesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSiteStatusesOK), nil

}

/*
GetVersions Returns list of all supported versions of Shipyard. Currently this returns a static value.
*/
func (a *Client) GetVersions(params *GetVersionsParams) (*GetVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVersions",
		Method:             "GET",
		PathPattern:        "/versions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVersionsOK), nil

}

/*
GetWFActionByID Retrieve an action by its id
*/
func (a *Client) GetWFActionByID(params *GetWFActionByIDParams) (*GetWFActionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWFActionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWFActionById",
		Method:             "GET",
		PathPattern:        "/api/v1.0/actions/{action-id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWFActionByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWFActionByIDOK), nil

}

/*
GetWFActionStepByID Retrieve an action step by its id
*/
func (a *Client) GetWFActionStepByID(params *GetWFActionStepByIDParams) (*GetWFActionStepByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWFActionStepByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWFActionStepById",
		Method:             "GET",
		PathPattern:        "/api/v1.0/actions/{action-id}/steps/{step-id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWFActionStepByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWFActionStepByIDOK), nil

}

/*
GetWFActionStepLogsByID Retrieve logs of an action step by its id
*/
func (a *Client) GetWFActionStepLogsByID(params *GetWFActionStepLogsByIDParams) (*GetWFActionStepLogsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWFActionStepLogsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWFActionStepLogsById",
		Method:             "GET",
		PathPattern:        "/api/v1.0/actions/{action-id}/steps/{step-id}/logs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWFActionStepLogsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWFActionStepLogsByIDOK), nil

}

/*
GetWFActionValidationByID Retrieve an action validation by its id
*/
func (a *Client) GetWFActionValidationByID(params *GetWFActionValidationByIDParams) (*GetWFActionValidationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWFActionValidationByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWFActionValidationById",
		Method:             "GET",
		PathPattern:        "/api/v1.0/actions/{action-id}/validations/{validation-id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWFActionValidationByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWFActionValidationByIDOK), nil

}

/*
GetWorkflowByID Retrieve the detailed information for a workflow (DAG) from Airflow
*/
func (a *Client) GetWorkflowByID(params *GetWorkflowByIDParams) (*GetWorkflowByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflowById",
		Method:             "GET",
		PathPattern:        "/api/v1.0/workflows/{workflow-id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowByIDOK), nil

}

/*
GetWorkflows Retrieve the list of workflows (DAGs) that have been invoked in Airflow, whether via Shipyard or scheduled
*/
func (a *Client) GetWorkflows(params *GetWorkflowsParams) (*GetWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflows",
		Method:             "GET",
		PathPattern:        "/api/v1.0/workflows",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowsOK), nil

}

/*
InvokeHelmTests Create a workflow action to invoke Helm tests on all releases or a targeted release
*/
func (a *Client) InvokeHelmTests(params *InvokeHelmTestsParams) (*InvokeHelmTestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvokeHelmTestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "invokeHelmTests",
		Method:             "POST",
		PathPattern:        "/api/v1.0/actions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InvokeHelmTestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InvokeHelmTestsOK), nil

}

/*
ProbeLiveness probe liveness API
*/
func (a *Client) ProbeLiveness(params *ProbeLivenessParams) (*ProbeLivenessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProbeLivenessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "probeLiveness",
		Method:             "GET",
		PathPattern:        "/liveness",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProbeLivenessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProbeLivenessOK), nil

}

/*
ProbeReadiness probe readiness API
*/
func (a *Client) ProbeReadiness(params *ProbeReadinessParams) (*ProbeReadinessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProbeReadinessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "probeReadiness",
		Method:             "GET",
		PathPattern:        "/readiness",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProbeReadinessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProbeReadinessOK), nil

}

/*
RetrieveConfigDocsClearTextByCollectionID Retrieve a collection of configuration documents with cleartext secrets.
*/
func (a *Client) RetrieveConfigDocsClearTextByCollectionID(params *RetrieveConfigDocsClearTextByCollectionIDParams) (*RetrieveConfigDocsClearTextByCollectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveConfigDocsClearTextByCollectionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retrieveConfigDocsClearTextByCollectionId",
		Method:             "GET",
		PathPattern:        "/api/v1.0/configdocs/{collection-id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrieveConfigDocsClearTextByCollectionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RetrieveConfigDocsClearTextByCollectionIDOK), nil

}

/*
RetrieveConfigDocsStatus Retrieve the status of the configdocs
*/
func (a *Client) RetrieveConfigDocsStatus(params *RetrieveConfigDocsStatusParams) (*RetrieveConfigDocsStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveConfigDocsStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retrieveConfigDocsStatus",
		Method:             "GET",
		PathPattern:        "/api/v1.0/configdocs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrieveConfigDocsStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RetrieveConfigDocsStatusOK), nil

}

/*
RetrieveRenderedCleartextConfigDocs Retrieve the configuration documents with cleartext secrets rendered by Deckhand into a complete design
*/
func (a *Client) RetrieveRenderedCleartextConfigDocs(params *RetrieveRenderedCleartextConfigDocsParams) (*RetrieveRenderedCleartextConfigDocsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveRenderedCleartextConfigDocsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retrieveRenderedCleartextConfigDocs",
		Method:             "GET",
		PathPattern:        "/api/v1.0/renderedconfigdocs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrieveRenderedCleartextConfigDocsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RetrieveRenderedCleartextConfigDocsOK), nil

}

/*
SendControlToWFAction Send a control to an action
*/
func (a *Client) SendControlToWFAction(params *SendControlToWFActionParams) (*SendControlToWFActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendControlToWFActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendControlToWFAction",
		Method:             "POST",
		PathPattern:        "/api/v1.0/actions/{action-id}/control/{control-verb}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SendControlToWFActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendControlToWFActionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
